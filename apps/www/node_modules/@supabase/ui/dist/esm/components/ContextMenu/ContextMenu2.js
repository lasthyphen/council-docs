import { jsxs, jsx } from 'react/jsx-runtime';
import { useState } from 'react';
import IconCheck from '../Icon/icons/IconCheck/IconCheck2.js';
import * as RadixContextMenu from '@radix-ui/react-context-menu';

function ContextMenu({
  onOpenChange,
  alignOffset = 6,
  overlay,
  children,
  className,
  style
}) {
  // let classes = [ContextMenuStyles['sbui-contextmenu__content']]
  // if (className) {
  //   classes.push(className)
  // }
  return jsxs(RadixContextMenu.Root, Object.assign({
    onOpenChange: onOpenChange
  }, {
    children: [jsx(RadixContextMenu.Trigger // className={ContextMenuStyles['sbui-contextmenu__trigger']}
    , {
      children: children
    }, void 0), jsx(RadixContextMenu.Content, Object.assign({
      sideOffset: alignOffset,
      // className={classes.join(' ')}
      style: style
    }, {
      children: overlay
    }), void 0)]
  }), void 0);
}

function Item({
  children,
  icon,
  disabled,
  onClick
}) {
  return jsxs(RadixContextMenu.Item // className={ContextMenuStyles['sbui-contextmenu-item']}
  , Object.assign({
    // className={ContextMenuStyles['sbui-contextmenu-item']}
    disabled: disabled,
    onSelect: onClick
  }, {
    children: [icon && icon, jsx("span", {
      children: children
    }, void 0)]
  }), void 0);
}
function Misc({
  children,
  icon
}) {
  return jsxs("div", {
    children: [icon && icon, children]
  }, void 0);
}
function Checkbox({
  children,
  checked: propsChecked,
  onChange,
  disabled,
  ItemIndicator
}) {
  const [checked, setChecked] = useState(propsChecked ? propsChecked : false);

  const handleChange = e => {
    if (onChange) onChange(e);
    setChecked(e);
  };

  return jsxs(RadixContextMenu.CheckboxItem, Object.assign({
    checked: checked,
    onCheckedChange: handleChange,
    // className={`${ContextMenuStyles['sbui-contextmenu-item']} ${ContextMenuStyles['sbui-contextmenu-input']}`}
    disabled: disabled
  }, {
    children: [jsxs(RadixContextMenu.ItemIndicator // className={ContextMenuStyles['sbui-contextmenu-input__check']}
    , {
      children: [ItemIndicator ? ItemIndicator : jsx(IconCheck, {
        size: "tiny"
      }, void 0), jsx(RadixContextMenu.CheckboxItem, {}, void 0)]
    }, void 0), jsx("span", {
      children: children
    }, void 0)]
  }), void 0);
}
function Radio({
  children,
  value,
  ItemIndicator
}) {
  return jsxs(RadixContextMenu.RadioItem, Object.assign({
    value: value
  }, {
    children: [jsx(RadixContextMenu.ItemIndicator // className={ContextMenuStyles['sbui-contextmenu-input__check']}
    , {
      children: ItemIndicator ? ItemIndicator : jsx(IconCheck, {
        size: "tiny"
      }, void 0)
    }, void 0), jsx("span", {
      children: children
    }, void 0)]
  }), void 0);
}
function RadioGroup({
  children,
  value: propsValue,
  onChange
}) {
  const [value, setValue] = useState(propsValue ? propsValue : '');

  const handleChange = e => {
    if (onChange) onChange(e);
    setValue(e);
  };

  return jsx(RadixContextMenu.RadioGroup, Object.assign({
    value: value,
    onValueChange: handleChange
  }, {
    children: children
  }), void 0);
}
function Label({
  children
}) {
  return jsx(RadixContextMenu.Label // className={ContextMenuStyles['sbui-contextmenu-label']}
  , {
    children: children
  }, void 0);
}
ContextMenu.Item = Item;
ContextMenu.Misc = Misc;
ContextMenu.Checkbox = Checkbox;
ContextMenu.Radio = Radio;
ContextMenu.RadioGroup = RadioGroup;
ContextMenu.Label = Label;

export { Checkbox, Item, Label, Misc, Radio, RadioGroup, ContextMenu as default };
