import { jsxs, jsx } from 'react/jsx-runtime';
import { useState } from 'react';
import * as RadixDropdown from '@radix-ui/react-dropdown-menu';
import IconCheck from '../Icon/icons/IconCheck/IconCheck2.js';
import styleHandler from '../../lib/theme/styleHandler.js';
import IconTarget from '../Icon/icons/IconTarget/IconTarget2.js';

function Dropdown({
  open,
  onOpenChange,
  align = 'center',
  //Default value
  side = 'bottom',
  //Default value
  sideOffset = 6,
  overlay,
  children,
  size = 'medium',
  className,
  style,
  arrow,
  isNested
}) {
  let __styles = styleHandler('dropdown');

  let classes = [__styles.content, __styles.size[size]];

  if (className) {
    classes.push(className);
  }

  return jsxs(RadixDropdown.Root, Object.assign({
    onOpenChange: onOpenChange,
    open: open
  }, {
    children: [isNested ? jsx(RadixDropdown.TriggerItem, Object.assign({
      className: [__styles.item_nested].join(' ')
    }, {
      children: children
    }), void 0) : jsx(RadixDropdown.Trigger, Object.assign({
      className: __styles.trigger
    }, {
      children: children
    }), void 0), jsxs(RadixDropdown.Content, Object.assign({
      portalled: true,
      sideOffset: sideOffset,
      side: side,
      align: align,
      className: classes.join(' '),
      style: style
    }, {
      children: [arrow && jsx(RadixDropdown.Arrow, {
        className: __styles.arrow,
        offset: 10
      }, void 0), overlay]
    }), void 0)]
  }), void 0);
}

function RightSlot({
  children
}) {
  let __styles = styleHandler('dropdown');

  return jsx("div", Object.assign({
    className: __styles.right_slot
  }, {
    children: children
  }), void 0);
}
function Item({
  children,
  icon,
  disabled,
  onClick,
  rightSlot
}) {
  let __styles = styleHandler('dropdown');

  return jsxs(RadixDropdown.Item, Object.assign({
    className: __styles.item,
    disabled: disabled,
    onSelect: onClick
  }, {
    children: [icon && icon, jsx("span", {
      children: children
    }, void 0)]
  }), void 0);
}
function TriggerItem({
  children,
  icon,
  disabled
}) {
  let __styles = styleHandler('dropdown');

  return jsxs("div", Object.assign({
    className: __styles.item
  }, {
    children: [icon && icon, jsx("span", {
      children: children
    }, void 0)]
  }), void 0);
}
function Misc({
  children,
  icon
}) {
  let __styles = styleHandler('dropdown');

  return jsxs("div", Object.assign({
    className: __styles.misc
  }, {
    children: [icon && icon, children]
  }), void 0);
}
function Seperator() {
  let __styles = styleHandler('dropdown');

  return jsx(RadixDropdown.Separator, {
    className: __styles.seperator
  }, void 0);
}
function Checkbox({
  children,
  checked: propsChecked,
  onChange,
  disabled,
  ItemIndicator
}) {
  const [checked, setChecked] = useState(propsChecked ? propsChecked : false);

  let __styles = styleHandler('dropdown');

  const handleChange = e => {
    if (onChange) onChange(e);
    setChecked(e);
  };

  return jsxs(RadixDropdown.CheckboxItem, Object.assign({
    checked: checked,
    onCheckedChange: handleChange,
    className: `${__styles.item} ${__styles.input}`,
    disabled: disabled
  }, {
    children: [jsxs(RadixDropdown.ItemIndicator, Object.assign({
      className: __styles.check
    }, {
      children: [ItemIndicator ? ItemIndicator : jsx(IconCheck, {
        size: "tiny",
        strokeWidth: 3
      }, void 0), jsx(RadixDropdown.CheckboxItem, {}, void 0)]
    }), void 0), jsx("span", {
      children: children
    }, void 0)]
  }), void 0);
}
function Radio({
  children,
  value,
  ItemIndicator
}) {
  let __styles = styleHandler('dropdown');

  return jsxs(RadixDropdown.RadioItem, Object.assign({
    value: value,
    className: `${__styles.item} ${__styles.input}`
  }, {
    children: [jsx(RadixDropdown.ItemIndicator, Object.assign({
      className: __styles.check
    }, {
      children: ItemIndicator ? ItemIndicator : jsx(IconTarget, {
        strokeWidth: 6,
        size: 10
      }, void 0)
    }), void 0), jsx("span", {
      children: children
    }, void 0)]
  }), void 0);
}
function RadioGroup({
  children,
  value: propsValue,
  onChange
}) {
  const [value, setValue] = useState(propsValue ? propsValue : '');

  const handleChange = e => {
    if (onChange) onChange(e);
    setValue(e);
  };

  return jsx(RadixDropdown.RadioGroup, Object.assign({
    value: value,
    onValueChange: handleChange
  }, {
    children: children
  }), void 0);
}
function Label({
  children
}) {
  let __styles = styleHandler('dropdown');

  return jsx(RadixDropdown.Label, Object.assign({
    className: __styles.label
  }, {
    children: children
  }), void 0);
}
Dropdown.Item = Item;
Dropdown.Misc = Misc;
Dropdown.Checkbox = Checkbox;
Dropdown.Radio = Radio;
Dropdown.RadioGroup = RadioGroup;
Dropdown.Label = Label;
Dropdown.Seperator = Seperator;
Dropdown.RightSlot = RightSlot;
Dropdown.TriggerItem = TriggerItem;

export { Checkbox, Item, Label, Misc, Radio, RadioGroup, RightSlot, Seperator, TriggerItem, Dropdown as default };
