import { jsxs, jsx } from 'react/jsx-runtime';
import * as RadixPopover from '@radix-ui/react-popover';
import IconX from '../Icon/icons/IconX/IconX2.js';
import styleHandler from '../../lib/theme/styleHandler.js';

function Popover({
  align = 'center',
  ariaLabel,
  arrow = false,
  children,
  className,
  defaultOpen = false,
  modal,
  onOpenChange,
  open,
  overlay,
  portalled,
  side = 'bottom',
  sideOffset = 6,
  style,
  header,
  footer,
  size = 'content'
}) {
  const __styles = styleHandler('popover');

  let classes = [__styles.content, __styles.size[size]];

  if (className) {
    classes.push(className);
  }

  return jsxs(RadixPopover.Root, Object.assign({
    defaultOpen: defaultOpen,
    modal: modal,
    onOpenChange: onOpenChange,
    open: open
  }, {
    children: [jsx(RadixPopover.Trigger // className={DropdownStyles['sbui-popover__trigger']}
    , Object.assign({
      // className={DropdownStyles['sbui-popover__trigger']}
      className: __styles.trigger,
      "aria-label": ariaLabel
    }, {
      children: children
    }), void 0), jsxs(RadixPopover.Content, Object.assign({
      sideOffset: sideOffset,
      side: side,
      align: align,
      className: classes.join(' '),
      style: style,
      portalled: portalled
    }, {
      children: [arrow && jsx(RadixPopover.Arrow // className={DropdownStyles['sbui-popover__arrow']}
      , {
        // className={DropdownStyles['sbui-popover__arrow']}
        offset: 10
      }, void 0), header && jsx("div", Object.assign({
        className: __styles.header
      }, {
        children: header
      }), void 0), overlay, footer && jsx("div", Object.assign({
        className: __styles.footer
      }, {
        children: footer
      }), void 0)]
    }), void 0)]
  }), void 0);
}

function Close() {
  const __styles = styleHandler('popover');

  return jsx(RadixPopover.Close, Object.assign({
    className: __styles.close
  }, {
    children: jsx(IconX, {
      size: 14,
      strokeWidth: 2
    }, void 0)
  }), void 0);
}

function Seperator() {
  const __styles = styleHandler('popover');

  return jsx("div", {
    className: __styles.seperator
  }, void 0);
}

Popover.Seperator = Seperator;
Popover.Close = Close;

export { Popover as default };
