import { __rest } from '../../_virtual/_tslib.js';
import { jsx } from 'react/jsx-runtime';
import { useState } from 'react';
import { FormLayout } from '../../lib/Layout/FormLayout/FormLayout.js';
import { useFormContext } from '../Form/FormContext.js';
import ToggleStyles from './Toggle.module.css.js';

function Toggle(_a) {
  var _b;

  var {
    disabled,
    id = '',
    name = '',
    layout = 'vertical',
    error,
    descriptionText,
    label,
    afterLabel,
    beforeLabel,
    labelOptional,
    onChange,
    onBlur,
    onFocus,
    onKeyDown,
    defaultChecked,
    checked,
    className,
    align = 'right',
    size = 'medium',
    validation
  } = _a,
      props = __rest(_a, ["disabled", "id", "name", "layout", "error", "descriptionText", "label", "afterLabel", "beforeLabel", "labelOptional", "onChange", "onBlur", "onFocus", "onKeyDown", "defaultChecked", "checked", "className", "align", "size", "validation"]);

  const [intChecked, setIntChecked] = useState((_b = defaultChecked || checked) !== null && _b !== void 0 ? _b : false);
  const {
    formContextOnChange,
    values,
    errors,
    handleBlur,
    touched,
    fieldLevelValidation
  } = useFormContext(); // if (values && !value) value = values[id || name]

  if (handleBlur) onBlur = handleBlur;

  if (!error) {
    if (errors && !error) error = errors[id || name];
    error = touched && touched[id || name] ? error : undefined;
  } // check if toggle checked is true or false
  // if neither true or false the toggle will rely on component state internally


  const active = checked !== null && checked !== void 0 ? checked : intChecked;

  function onClick() {
    // '`onChange` callback for this component
    // @ts-ignore // issue with conflicting input/button tag being used
    if (onChange) onChange(!active);
    setIntChecked(!intChecked);
    /*
     * Create change event for formik
     * formik expects an input change event
     */

    let event = {};
    event.target = {
      type: 'checkbox',
      name: name,
      id: id,
      value: !intChecked,
      checked: !intChecked // outerHTML: undefined,
      // options: undefined,
      // multiple: undefined,

    }; // update form

    if (formContextOnChange) formContextOnChange(event); // run field level validation

    if (validation) fieldLevelValidation(id, validation(!intChecked));
  }

  let toggleClasses = [ToggleStyles['sbui-toggle'], ToggleStyles[`sbui-toggle--${size}`]];
  if (active) toggleClasses.push(ToggleStyles['sbui-toggle--active']);
  let handleClasses = [ToggleStyles['sbui-toggle__handle']];
  if (active) handleClasses.push(ToggleStyles['sbui-toggle__handle--active']);
  return jsx(FormLayout, Object.assign({
    className: className,
    label: label,
    afterLabel: afterLabel,
    beforeLabel: beforeLabel,
    labelOptional: labelOptional,
    layout: layout,
    id: id,
    error: error,
    align: layout === 'vertical' ? align : undefined,
    flex: layout === 'vertical' ? true : false,
    descriptionText: descriptionText,
    size: size
  }, {
    children: jsx("button", Object.assign({
      type: "button",
      id: id,
      name: name,
      className: toggleClasses.join(' '),
      onClick: onClick,
      disabled: disabled,
      onFocus: onFocus ? event => onFocus(event) : undefined,
      onBlur: onBlur,
      onKeyDown: onKeyDown ? event => onKeyDown(event) : undefined
    }, props, {
      children: jsx("span", {
        "aria-hidden": "true",
        className: handleClasses.join(' ')
      }, void 0)
    }), void 0)
  }), void 0);
}

export { Toggle as default };
