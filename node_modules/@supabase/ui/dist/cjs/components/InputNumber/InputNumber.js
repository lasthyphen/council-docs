'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var FormLayout = require('../../lib/Layout/FormLayout/FormLayout.js');
var InputErrorIcon = require('../../lib/Layout/InputErrorIcon.js');
var InputIconContainer = require('../../lib/Layout/InputIconContainer.js');
var InputNumber_module = require('./InputNumber.module.css.js');
var FormContext = require('../Form/FormContext.js');
var Space = require('../Space/Space2.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

function InputNumber({
  autoComplete,
  autofocus,
  className,
  defaultValue,
  descriptionText,
  disabled,
  error,
  icon,
  id = '',
  inputRef,
  label,
  afterLabel,
  beforeLabel,
  labelOptional,
  layout,
  name = '',
  onChange,
  onBlur,
  onFocus,
  onKeyDown,
  placeholder,
  value = undefined,
  style,
  size = 'medium',
  min,
  max,
  borderless = false,
  validation
}) {
  const {
    formContextOnChange,
    values,
    errors,
    handleBlur,
    touched,
    fieldLevelValidation
  } = FormContext.useFormContext();
  if (values && !value) value = values[id];
  if (handleBlur) onBlur = handleBlur;

  if (!error) {
    if (errors && !error) error = errors[id || name];
    error = touched && touched[id || name] ? error : undefined;
  }

  function onInputChange(e) {
    if (onChange) onChange(e); // update form

    if (formContextOnChange) formContextOnChange(e); // run field level validation

    if (validation) fieldLevelValidation(id, validation(e.target.value));
  }

  React.useEffect(() => {
    if (validation) fieldLevelValidation(id, validation(value));
  }, []);
  const inputClasses = [InputNumber_module['default']['sbui-inputnumber']];
  const inputRefCurrent = inputRef ? inputRef : /*#__PURE__*/React__default['default'].createRef();
  if (error) inputClasses.push(InputNumber_module['default']['sbui-inputnumber--error']);
  if (icon) inputClasses.push(InputNumber_module['default']['sbui-inputnumber--with-icon']);

  if (size) {
    inputClasses.push(InputNumber_module['default'][`sbui-inputnumber--${size}`]);
  }

  if (borderless) inputClasses.push(InputNumber_module['default']['sbui-inputnumber--borderless']);

  return jsxRuntime.jsx("div", Object.assign({
    className: className
  }, {
    children: jsxRuntime.jsx(FormLayout.FormLayout, Object.assign({
      label: label,
      afterLabel: afterLabel,
      beforeLabel: beforeLabel,
      labelOptional: labelOptional,
      layout: layout,
      id: id,
      error: error,
      descriptionText: descriptionText,
      style: style,
      size: size
    }, {
      children: jsxRuntime.jsxs("div", Object.assign({
        className: InputNumber_module['default']['sbui-inputnumber-container']
      }, {
        children: [jsxRuntime.jsx("input", {
          autoComplete: autoComplete,
          autoFocus: autofocus,
          defaultValue: defaultValue,
          disabled: disabled,
          id: id,
          name: name,
          onChange: onInputChange,
          onFocus: onFocus ? event => onFocus(event) : undefined,
          onBlur: onBlur,
          onKeyDown: onKeyDown ? event => onKeyDown(event) : undefined,
          placeholder: placeholder,
          ref: inputRefCurrent,
          type: 'number',
          value: value,
          className: inputClasses.join(' '),
          min: min,
          max: max
        }, void 0), icon && jsxRuntime.jsx(InputIconContainer['default'], {
          icon: icon
        }, void 0), error ? jsxRuntime.jsx(Space['default'], Object.assign({
          className: InputNumber_module['default']['sbui-inputnumber-actions-container'],
          size: 1
        }, {
          children: error && jsxRuntime.jsx(InputErrorIcon['default'], {
            size: size
          }, void 0)
        }), void 0) : null]
      }), void 0)
    }), void 0)
  }), void 0);
}

exports['default'] = InputNumber;
