import { ServiceNames } from 'constants';
export declare enum NotificationName {
    ProjectExceedingTierLimit = "project.tier-limit-exceeded",
    PostgresqlUpgradeAvailable = "postgresql.upgrade-available",
    PostgresqlUpgradeCompleted = "postgresql.upgrade-completed",
    ProjectUpdateCompleted = "project.update-completed",
    ProjectInformational = "project.informational"
}
export declare enum NotificationStatus {
    New = "new",
    Seen = "seen"
}
export declare enum ActionType {
    UpgradeProjectToPro = "project.upgrade",
    SchedulePostgresRestart = "postgresql.restart",
    MigratePostgresSchema = "postgresql.migrate",
    PgBouncerRestart = "pgbouncer.restart"
}
export declare enum ActionReason {
    Apply = "apply",
    Rollback = "rollback",
    Finalize = "finalize"
}
export interface Action {
    action_type: ActionType;
    reason?: string | ActionReason;
    deadline?: Date;
}
export interface SharedMeta {
    actions_available: Action[];
}
export interface Notification {
    id: string;
    project_id: number;
    inserted_at: Date;
    notification_name: NotificationName;
    notification_status: NotificationStatus;
    data: ProjectExceedingTierLimitData | PostgresqlUpgradeData | ProjectUpdateData | ProjectInformationalData;
    meta: SharedMeta;
}
export declare enum ViolationType {
    Storage = "Storage",
    Egress = "Egress",
    AuthUsers = "AuthUsers",
    DbSize = "DbSize"
}
export interface ViolatedLimit {
    dimension: ViolationType;
    current_value: number;
}
export declare type ProjectExceedingTierLimitData = {
    name: NotificationName.ProjectExceedingTierLimit;
    violations: ViolatedLimit[];
};
export interface ExtensionsUpgrade {
    name: string;
    version_to: string;
}
export interface ServerUpgrade {
    version_to: string;
}
export declare type PostgresqlUpgradeData = {
    name: NotificationName.PostgresqlUpgradeAvailable | NotificationName.PostgresqlUpgradeCompleted;
    upgrade_type: 'postgresql-server' | 'extensions' | 'schema-migration';
    additional: ServerUpgrade | ExtensionsUpgrade;
    changelog_link?: string;
};
export interface ServiceUpgrade {
    name: ServiceNames;
    version_to: string;
    changelog_link?: string;
}
export declare type ProjectUpdateData = {
    name: NotificationName.ProjectUpdateCompleted;
    upgrades: ServiceUpgrade[];
};
export declare type ProjectInformationalData = {
    name: NotificationName.ProjectInformational;
    message: string;
};
