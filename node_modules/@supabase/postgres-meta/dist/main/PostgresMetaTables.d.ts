import { PostgresMetaResult, PostgresTable } from './types';
export default class PostgresMetaTables {
    query: (sql: string) => Promise<PostgresMetaResult<any>>;
    constructor(query: (sql: string) => Promise<PostgresMetaResult<any>>);
    list({ includeSystemSchemas, limit, offset, }?: {
        includeSystemSchemas?: boolean;
        limit?: number;
        offset?: number;
    }): Promise<PostgresMetaResult<PostgresTable[]>>;
    retrieve({ id }: {
        id: number;
    }): Promise<PostgresMetaResult<PostgresTable>>;
    retrieve({ name, schema, }: {
        name: string;
        schema: string;
    }): Promise<PostgresMetaResult<PostgresTable>>;
    create({ name, schema, comment, }: {
        name: string;
        schema?: string;
        comment?: string;
    }): Promise<PostgresMetaResult<PostgresTable>>;
    update(id: number, { name, schema, rls_enabled, rls_forced, replica_identity, replica_identity_index, comment, }: {
        name?: string;
        schema?: string;
        rls_enabled?: boolean;
        rls_forced?: boolean;
        replica_identity?: 'DEFAULT' | 'INDEX' | 'FULL' | 'NOTHING';
        replica_identity_index?: string;
        comment?: string;
    }): Promise<PostgresMetaResult<PostgresTable>>;
    remove(id: number, { cascade }?: {
        cascade?: boolean | undefined;
    }): Promise<PostgresMetaResult<PostgresTable>>;
}
//# sourceMappingURL=PostgresMetaTables.d.ts.map