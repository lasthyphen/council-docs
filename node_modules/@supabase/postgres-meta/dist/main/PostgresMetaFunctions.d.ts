import { PostgresMetaResult, PostgresFunction, PostgresFunctionCreate } from './types';
export default class PostgresMetaFunctions {
    query: (sql: string) => Promise<PostgresMetaResult<any>>;
    constructor(query: (sql: string) => Promise<PostgresMetaResult<any>>);
    list({ includeSystemSchemas, limit, offset, }?: {
        includeSystemSchemas?: boolean;
        limit?: number;
        offset?: number;
    }): Promise<PostgresMetaResult<PostgresFunction[]>>;
    retrieve({ id }: {
        id: number;
    }): Promise<PostgresMetaResult<PostgresFunction>>;
    retrieve({ name, schema, args, }: {
        name: string;
        schema: string;
        args: string[];
    }): Promise<PostgresMetaResult<PostgresFunction>>;
    create({ name, schema, args, definition, return_type, language, behavior, security_definer, config_params, }: PostgresFunctionCreate): Promise<PostgresMetaResult<PostgresFunction>>;
    update(id: number, { name, schema, definition, }: {
        name?: string;
        schema?: string;
        definition?: string;
    }): Promise<PostgresMetaResult<PostgresFunction>>;
    remove(id: number, { cascade }?: {
        cascade?: boolean | undefined;
    }): Promise<PostgresMetaResult<PostgresFunction>>;
    private generateCreateFunctionSql;
    private generateRetrieveFunctionSql;
}
//# sourceMappingURL=PostgresMetaFunctions.d.ts.map