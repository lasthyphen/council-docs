"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.postgresVersionSchema = exports.postgresTypeSchema = exports.postgresTriggerSchema = exports.postgresTableSchema = exports.postgresSchemaUpdateSchema = exports.postgresSchemaCreateSchema = exports.postgresSchemaSchema = exports.postgresRoleSchema = exports.postgresRelationshipSchema = exports.postgresPublicationSchema = exports.postgresPrimaryKeySchema = exports.postgresPolicySchema = exports.postgresGrantSchema = exports.postgresFunctionCreateFunction = exports.postgresExtensionSchema = exports.postgresConfigSchema = exports.postgresColumnSchema = void 0;
const typebox_1 = require("@sinclair/typebox");
exports.postgresColumnSchema = typebox_1.Type.Object({
    table_id: typebox_1.Type.Integer(),
    schema: typebox_1.Type.String(),
    table: typebox_1.Type.String(),
    id: typebox_1.Type.RegEx(/^(\d+)\.(\d+)$/),
    ordinal_position: typebox_1.Type.Integer(),
    name: typebox_1.Type.String(),
    default_value: typebox_1.Type.Unknown(),
    data_type: typebox_1.Type.String(),
    format: typebox_1.Type.String(),
    is_identity: typebox_1.Type.Boolean(),
    identity_generation: typebox_1.Type.Union([
        typebox_1.Type.Literal('ALWAYS'),
        typebox_1.Type.Literal('BY DEFAULT'),
        typebox_1.Type.Null(),
    ]),
    is_nullable: typebox_1.Type.Boolean(),
    is_updatable: typebox_1.Type.Boolean(),
    is_unique: typebox_1.Type.Boolean(),
    enums: typebox_1.Type.Array(typebox_1.Type.Unknown()),
    comment: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
});
// TODO Rethink config.sql
exports.postgresConfigSchema = typebox_1.Type.Object({
    name: typebox_1.Type.Unknown(),
    setting: typebox_1.Type.Unknown(),
    category: typebox_1.Type.Unknown(),
    group: typebox_1.Type.Unknown(),
    subgroup: typebox_1.Type.Unknown(),
    unit: typebox_1.Type.Unknown(),
    short_desc: typebox_1.Type.Unknown(),
    extra_desc: typebox_1.Type.Unknown(),
    context: typebox_1.Type.Unknown(),
    vartype: typebox_1.Type.Unknown(),
    source: typebox_1.Type.Unknown(),
    min_val: typebox_1.Type.Unknown(),
    max_val: typebox_1.Type.Unknown(),
    enumvals: typebox_1.Type.Unknown(),
    boot_val: typebox_1.Type.Unknown(),
    reset_val: typebox_1.Type.Unknown(),
    sourcefile: typebox_1.Type.Unknown(),
    sourceline: typebox_1.Type.Unknown(),
    pending_restart: typebox_1.Type.Unknown(),
});
exports.postgresExtensionSchema = typebox_1.Type.Object({
    name: typebox_1.Type.String(),
    schema: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
    default_version: typebox_1.Type.String(),
    installed_version: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
    comment: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
});
const postgresFunctionSchema = typebox_1.Type.Object({
    id: typebox_1.Type.Integer(),
    schema: typebox_1.Type.String(),
    name: typebox_1.Type.String(),
    language: typebox_1.Type.String(),
    definition: typebox_1.Type.String(),
    complete_statement: typebox_1.Type.String(),
    argument_types: typebox_1.Type.String(),
    identity_argument_types: typebox_1.Type.String(),
    return_type: typebox_1.Type.String(),
    behavior: typebox_1.Type.Union([
        typebox_1.Type.Literal('IMMUTABLE'),
        typebox_1.Type.Literal('STABLE'),
        typebox_1.Type.Literal('VOLATILE'),
    ]),
    security_definer: typebox_1.Type.Boolean(),
    config_params: typebox_1.Type.Union([typebox_1.Type.Record(typebox_1.Type.String(), typebox_1.Type.String()), typebox_1.Type.Null()]),
});
exports.postgresFunctionCreateFunction = typebox_1.Type.Object({
    name: typebox_1.Type.String(),
    definition: typebox_1.Type.String(),
    args: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.String())),
    behavior: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.Literal('IMMUTABLE'), typebox_1.Type.Literal('STABLE'), typebox_1.Type.Literal('VOLATILE')])),
    config_params: typebox_1.Type.Optional(typebox_1.Type.Record(typebox_1.Type.String(), typebox_1.Type.String())),
    schema: typebox_1.Type.Optional(typebox_1.Type.String()),
    language: typebox_1.Type.Optional(typebox_1.Type.String()),
    return_type: typebox_1.Type.Optional(typebox_1.Type.String()),
    security_definer: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
});
exports.postgresGrantSchema = typebox_1.Type.Object({
    table_id: typebox_1.Type.Integer(),
    grantor: typebox_1.Type.String(),
    grantee: typebox_1.Type.String(),
    schema: typebox_1.Type.String(),
    table_name: typebox_1.Type.String(),
    privilege_type: typebox_1.Type.Union([
        typebox_1.Type.Literal('INSERT'),
        typebox_1.Type.Literal('SELECT'),
        typebox_1.Type.Literal('UPDATE'),
        typebox_1.Type.Literal('DELETE'),
        typebox_1.Type.Literal('TRUNCATE'),
        typebox_1.Type.Literal('REFERENCES'),
        typebox_1.Type.Literal('TRIGGER'),
    ]),
    is_grantable: typebox_1.Type.Boolean(),
    with_hierarchy: typebox_1.Type.Boolean(),
});
exports.postgresPolicySchema = typebox_1.Type.Object({
    id: typebox_1.Type.Integer(),
    schema: typebox_1.Type.String(),
    table: typebox_1.Type.String(),
    table_id: typebox_1.Type.Integer(),
    name: typebox_1.Type.String(),
    action: typebox_1.Type.Union([typebox_1.Type.Literal('PERMISSIVE'), typebox_1.Type.Literal('RESTRICTIVE')]),
    roles: typebox_1.Type.Array(typebox_1.Type.String()),
    command: typebox_1.Type.Union([
        typebox_1.Type.Literal('SELECT'),
        typebox_1.Type.Literal('INSERT'),
        typebox_1.Type.Literal('UPDATE'),
        typebox_1.Type.Literal('DELETE'),
        typebox_1.Type.Literal('ALL'),
    ]),
    definition: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
    check: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
});
exports.postgresPrimaryKeySchema = typebox_1.Type.Object({
    schema: typebox_1.Type.String(),
    table_name: typebox_1.Type.String(),
    name: typebox_1.Type.String(),
    table_id: typebox_1.Type.Integer(),
});
exports.postgresPublicationSchema = typebox_1.Type.Object({
    id: typebox_1.Type.Integer(),
    name: typebox_1.Type.String(),
    owner: typebox_1.Type.String(),
    publish_insert: typebox_1.Type.Boolean(),
    publish_update: typebox_1.Type.Boolean(),
    publish_delete: typebox_1.Type.Boolean(),
    publish_truncate: typebox_1.Type.Boolean(),
    tables: typebox_1.Type.Union([
        typebox_1.Type.Array(typebox_1.Type.Object({
            id: typebox_1.Type.Integer(),
            name: typebox_1.Type.String(),
            schema: typebox_1.Type.String(),
        })),
        typebox_1.Type.Null(),
    ]),
});
exports.postgresRelationshipSchema = typebox_1.Type.Object({
    id: typebox_1.Type.Integer(),
    constraint_name: typebox_1.Type.String(),
    source_schema: typebox_1.Type.String(),
    source_table_name: typebox_1.Type.String(),
    source_column_name: typebox_1.Type.String(),
    target_table_schema: typebox_1.Type.String(),
    target_table_name: typebox_1.Type.String(),
    target_column_name: typebox_1.Type.String(),
});
exports.postgresRoleSchema = typebox_1.Type.Object({
    id: typebox_1.Type.Integer(),
    name: typebox_1.Type.String(),
    is_superuser: typebox_1.Type.Boolean(),
    can_create_db: typebox_1.Type.Boolean(),
    can_create_role: typebox_1.Type.Boolean(),
    inherit_role: typebox_1.Type.Boolean(),
    can_login: typebox_1.Type.Boolean(),
    is_replication_role: typebox_1.Type.Boolean(),
    can_bypass_rls: typebox_1.Type.Boolean(),
    active_connections: typebox_1.Type.Integer(),
    connection_limit: typebox_1.Type.Integer(),
    password: typebox_1.Type.String(),
    valid_until: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
    config: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
    grants: typebox_1.Type.Array(exports.postgresGrantSchema),
});
exports.postgresSchemaSchema = typebox_1.Type.Object({
    id: typebox_1.Type.Integer(),
    name: typebox_1.Type.String(),
    owner: typebox_1.Type.String(),
});
exports.postgresSchemaCreateSchema = typebox_1.Type.Object({
    name: typebox_1.Type.String(),
    owner: typebox_1.Type.Optional(typebox_1.Type.String()),
});
exports.postgresSchemaUpdateSchema = typebox_1.Type.Object({
    name: typebox_1.Type.Optional(typebox_1.Type.String()),
    owner: typebox_1.Type.Optional(typebox_1.Type.String()),
});
exports.postgresTableSchema = typebox_1.Type.Object({
    id: typebox_1.Type.Integer(),
    schema: typebox_1.Type.String(),
    name: typebox_1.Type.String(),
    rls_enabled: typebox_1.Type.Boolean(),
    rls_forced: typebox_1.Type.Boolean(),
    replica_identity: typebox_1.Type.Union([
        typebox_1.Type.Literal('DEFAULT'),
        typebox_1.Type.Literal('INDEX'),
        typebox_1.Type.Literal('FULL'),
        typebox_1.Type.Literal('NOTHING'),
    ]),
    bytes: typebox_1.Type.Integer(),
    size: typebox_1.Type.String(),
    live_rows_estimate: typebox_1.Type.Integer(),
    dead_rows_estimate: typebox_1.Type.Integer(),
    comment: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
    columns: typebox_1.Type.Array(exports.postgresColumnSchema),
    grants: typebox_1.Type.Array(exports.postgresGrantSchema),
    policies: typebox_1.Type.Array(exports.postgresPolicySchema),
    primary_keys: typebox_1.Type.Array(exports.postgresPrimaryKeySchema),
    relationships: typebox_1.Type.Array(exports.postgresRelationshipSchema),
});
exports.postgresTriggerSchema = typebox_1.Type.Object({
    id: typebox_1.Type.Integer(),
    table_id: typebox_1.Type.Integer(),
    enabled_mode: typebox_1.Type.Union([
        typebox_1.Type.Literal('ORIGIN'),
        typebox_1.Type.Literal('REPLICA'),
        typebox_1.Type.Literal('ALWAYS'),
        typebox_1.Type.Literal('DISABLED'),
    ]),
    name: typebox_1.Type.String(),
    table: typebox_1.Type.String(),
    schema: typebox_1.Type.String(),
    condition: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
    orientation: typebox_1.Type.Union([typebox_1.Type.Literal('ROW'), typebox_1.Type.Literal('STATEMENT')]),
    activation: typebox_1.Type.Union([
        typebox_1.Type.Literal('BEFORE'),
        typebox_1.Type.Literal('AFTER'),
        typebox_1.Type.Literal('INSTEAD OF'),
    ]),
    events: typebox_1.Type.Array(typebox_1.Type.String()),
    function_schema: typebox_1.Type.String(),
    function_name: typebox_1.Type.String(),
    function_args: typebox_1.Type.Array(typebox_1.Type.String()),
});
exports.postgresTypeSchema = typebox_1.Type.Object({
    id: typebox_1.Type.Integer(),
    name: typebox_1.Type.String(),
    schema: typebox_1.Type.String(),
    format: typebox_1.Type.String(),
    enums: typebox_1.Type.Array(typebox_1.Type.Unknown()),
    comment: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
});
exports.postgresVersionSchema = typebox_1.Type.Object({
    version: typebox_1.Type.String(),
    version_number: typebox_1.Type.Integer(),
    active_connections: typebox_1.Type.Integer(),
    max_connections: typebox_1.Type.Integer(),
});
//# sourceMappingURL=types.js.map