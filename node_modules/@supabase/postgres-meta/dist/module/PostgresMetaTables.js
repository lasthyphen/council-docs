var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ident, literal } from 'pg-format';
import { DEFAULT_SYSTEM_SCHEMAS } from './constants';
import { coalesceRowsToArray } from './helpers';
import { columnsSql, grantsSql, policiesSql, primaryKeysSql, relationshipsSql, tablesSql, } from './sql';
export default class PostgresMetaTables {
    constructor(query) {
        this.query = query;
    }
    list({ includeSystemSchemas = false, limit, offset, } = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            let sql = enrichedTablesSql;
            if (!includeSystemSchemas) {
                sql = `${sql} WHERE NOT (schema IN (${DEFAULT_SYSTEM_SCHEMAS.map(literal).join(',')}))`;
            }
            if (limit) {
                sql = `${sql} LIMIT ${limit}`;
            }
            if (offset) {
                sql = `${sql} OFFSET ${offset}`;
            }
            return yield this.query(sql);
        });
    }
    retrieve({ id, name, schema = 'public', }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (id) {
                const sql = `${enrichedTablesSql} WHERE tables.id = ${literal(id)};`;
                const { data, error } = yield this.query(sql);
                if (error) {
                    return { data, error };
                }
                else if (data.length === 0) {
                    return { data: null, error: { message: `Cannot find a table with ID ${id}` } };
                }
                else {
                    return { data: data[0], error };
                }
            }
            else if (name) {
                const sql = `${enrichedTablesSql} WHERE tables.name = ${literal(name)} AND tables.schema = ${literal(schema)};`;
                const { data, error } = yield this.query(sql);
                if (error) {
                    return { data, error };
                }
                else if (data.length === 0) {
                    return {
                        data: null,
                        error: { message: `Cannot find a table named ${name} in schema ${schema}` },
                    };
                }
                else {
                    return { data: data[0], error };
                }
            }
            else {
                return { data: null, error: { message: 'Invalid parameters on table retrieve' } };
            }
        });
    }
    create({ name, schema = 'public', comment, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const tableSql = `CREATE TABLE ${ident(schema)}.${ident(name)} ();`;
            const commentSql = comment === undefined
                ? ''
                : `COMMENT ON TABLE ${ident(schema)}.${ident(name)} IS ${literal(comment)};`;
            const sql = `BEGIN; ${tableSql} ${commentSql} COMMIT;`;
            const { error } = yield this.query(sql);
            if (error) {
                return { data: null, error };
            }
            return yield this.retrieve({ name, schema });
        });
    }
    update(id, { name, schema, rls_enabled, rls_forced, replica_identity, replica_identity_index, comment, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data: old, error } = yield this.retrieve({ id });
            if (error) {
                return { data: null, error };
            }
            const alter = `ALTER TABLE ${ident(old.schema)}.${ident(old.name)}`;
            const schemaSql = schema === undefined ? '' : `${alter} SET SCHEMA ${ident(schema)};`;
            let nameSql = '';
            if (name !== undefined && name !== old.name) {
                const currentSchema = schema === undefined ? old.schema : schema;
                nameSql = `ALTER TABLE ${ident(currentSchema)}.${ident(old.name)} RENAME TO ${ident(name)};`;
            }
            let enableRls = '';
            if (rls_enabled !== undefined) {
                const enable = `${alter} ENABLE ROW LEVEL SECURITY;`;
                const disable = `${alter} DISABLE ROW LEVEL SECURITY;`;
                enableRls = rls_enabled ? enable : disable;
            }
            let forceRls = '';
            if (rls_forced !== undefined) {
                const enable = `${alter} FORCE ROW LEVEL SECURITY;`;
                const disable = `${alter} NO FORCE ROW LEVEL SECURITY;`;
                forceRls = rls_forced ? enable : disable;
            }
            let replicaSql;
            if (replica_identity === undefined) {
                replicaSql = '';
            }
            else if (replica_identity === 'INDEX') {
                replicaSql = `${alter} REPLICA IDENTITY USING INDEX ${replica_identity_index};`;
            }
            else {
                replicaSql = `${alter} REPLICA IDENTITY ${replica_identity};`;
            }
            const commentSql = comment === undefined
                ? ''
                : `COMMENT ON TABLE ${ident(old.schema)}.${ident(old.name)} IS ${literal(comment)};`;
            // nameSql must be last, right below schemaSql
            const sql = `
BEGIN;
  ${enableRls}
  ${forceRls}
  ${replicaSql}
  ${commentSql}
  ${schemaSql}
  ${nameSql}
COMMIT;`;
            {
                const { error } = yield this.query(sql);
                if (error) {
                    return { data: null, error };
                }
            }
            return yield this.retrieve({ id });
        });
    }
    remove(id, { cascade = false } = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data: table, error } = yield this.retrieve({ id });
            if (error) {
                return { data: null, error };
            }
            const sql = `DROP TABLE ${ident(table.schema)}.${ident(table.name)} ${cascade ? 'CASCADE' : 'RESTRICT'};`;
            {
                const { error } = yield this.query(sql);
                if (error) {
                    return { data: null, error };
                }
            }
            return { data: table, error: null };
        });
    }
}
const enrichedTablesSql = `
WITH tables AS (${tablesSql}),
  columns AS (${columnsSql}),
  grants AS (${grantsSql}),
  policies AS (${policiesSql}),
  primary_keys AS (${primaryKeysSql}),
  relationships AS (${relationshipsSql})
SELECT
  *,
  ${coalesceRowsToArray('columns', 'SELECT * FROM columns WHERE columns.table_id = tables.id')},
  ${coalesceRowsToArray('grants', 'SELECT * FROM grants WHERE grants.table_id = tables.id')},
  ${coalesceRowsToArray('policies', 'SELECT * FROM policies WHERE policies.table_id = tables.id')},
  ${coalesceRowsToArray('primary_keys', 'SELECT * FROM primary_keys WHERE primary_keys.table_id = tables.id')},
  ${coalesceRowsToArray('relationships', `SELECT
       *
     FROM
       relationships
     WHERE
       (relationships.source_schema = tables.schema AND relationships.source_table_name = tables.name)
       OR (relationships.target_table_schema = tables.schema AND relationships.target_table_name = tables.name)`)}
FROM tables`;
//# sourceMappingURL=PostgresMetaTables.js.map