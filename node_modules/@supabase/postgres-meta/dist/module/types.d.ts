import { Static } from '@sinclair/typebox';
export interface PostgresMetaOk<T> {
    data: T;
    error: null;
}
export interface PostgresMetaErr {
    data: null;
    error: {
        message: string;
    };
}
export declare type PostgresMetaResult<T> = PostgresMetaOk<T> | PostgresMetaErr;
export declare const postgresColumnSchema: import("@sinclair/typebox").TObject<{
    table_id: import("@sinclair/typebox").TInteger;
    schema: import("@sinclair/typebox").TString;
    table: import("@sinclair/typebox").TString;
    id: import("@sinclair/typebox").TString;
    ordinal_position: import("@sinclair/typebox").TInteger;
    name: import("@sinclair/typebox").TString;
    default_value: import("@sinclair/typebox").TUnknown;
    data_type: import("@sinclair/typebox").TString;
    format: import("@sinclair/typebox").TString;
    is_identity: import("@sinclair/typebox").TBoolean;
    identity_generation: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"ALWAYS">, import("@sinclair/typebox").TLiteral<"BY DEFAULT">, import("@sinclair/typebox").TNull]>;
    is_nullable: import("@sinclair/typebox").TBoolean;
    is_updatable: import("@sinclair/typebox").TBoolean;
    is_unique: import("@sinclair/typebox").TBoolean;
    enums: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TUnknown>;
    comment: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TNull]>;
}>;
export declare type PostgresColumn = Static<typeof postgresColumnSchema>;
export declare const postgresConfigSchema: import("@sinclair/typebox").TObject<{
    name: import("@sinclair/typebox").TUnknown;
    setting: import("@sinclair/typebox").TUnknown;
    category: import("@sinclair/typebox").TUnknown;
    group: import("@sinclair/typebox").TUnknown;
    subgroup: import("@sinclair/typebox").TUnknown;
    unit: import("@sinclair/typebox").TUnknown;
    short_desc: import("@sinclair/typebox").TUnknown;
    extra_desc: import("@sinclair/typebox").TUnknown;
    context: import("@sinclair/typebox").TUnknown;
    vartype: import("@sinclair/typebox").TUnknown;
    source: import("@sinclair/typebox").TUnknown;
    min_val: import("@sinclair/typebox").TUnknown;
    max_val: import("@sinclair/typebox").TUnknown;
    enumvals: import("@sinclair/typebox").TUnknown;
    boot_val: import("@sinclair/typebox").TUnknown;
    reset_val: import("@sinclair/typebox").TUnknown;
    sourcefile: import("@sinclair/typebox").TUnknown;
    sourceline: import("@sinclair/typebox").TUnknown;
    pending_restart: import("@sinclair/typebox").TUnknown;
}>;
export declare type PostgresConfig = Static<typeof postgresConfigSchema>;
export declare const postgresExtensionSchema: import("@sinclair/typebox").TObject<{
    name: import("@sinclair/typebox").TString;
    schema: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TNull]>;
    default_version: import("@sinclair/typebox").TString;
    installed_version: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TNull]>;
    comment: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TNull]>;
}>;
export declare type PostgresExtension = Static<typeof postgresExtensionSchema>;
declare const postgresFunctionSchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TInteger;
    schema: import("@sinclair/typebox").TString;
    name: import("@sinclair/typebox").TString;
    language: import("@sinclair/typebox").TString;
    definition: import("@sinclair/typebox").TString;
    complete_statement: import("@sinclair/typebox").TString;
    argument_types: import("@sinclair/typebox").TString;
    identity_argument_types: import("@sinclair/typebox").TString;
    return_type: import("@sinclair/typebox").TString;
    behavior: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"IMMUTABLE">, import("@sinclair/typebox").TLiteral<"STABLE">, import("@sinclair/typebox").TLiteral<"VOLATILE">]>;
    security_definer: import("@sinclair/typebox").TBoolean;
    config_params: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TRecord<import("@sinclair/typebox").TString, import("@sinclair/typebox").TString>, import("@sinclair/typebox").TNull]>;
}>;
export declare type PostgresFunction = Static<typeof postgresFunctionSchema>;
export declare const postgresFunctionCreateFunction: import("@sinclair/typebox").TObject<{
    name: import("@sinclair/typebox").TString;
    definition: import("@sinclair/typebox").TString;
    args: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>>;
    behavior: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"IMMUTABLE">, import("@sinclair/typebox").TLiteral<"STABLE">, import("@sinclair/typebox").TLiteral<"VOLATILE">]>>;
    config_params: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TRecord<import("@sinclair/typebox").TString, import("@sinclair/typebox").TString>>;
    schema: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    language: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    return_type: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    security_definer: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
}>;
export declare type PostgresFunctionCreate = Static<typeof postgresFunctionCreateFunction>;
export declare const postgresGrantSchema: import("@sinclair/typebox").TObject<{
    table_id: import("@sinclair/typebox").TInteger;
    grantor: import("@sinclair/typebox").TString;
    grantee: import("@sinclair/typebox").TString;
    schema: import("@sinclair/typebox").TString;
    table_name: import("@sinclair/typebox").TString;
    privilege_type: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"INSERT">, import("@sinclair/typebox").TLiteral<"SELECT">, import("@sinclair/typebox").TLiteral<"UPDATE">, import("@sinclair/typebox").TLiteral<"DELETE">, import("@sinclair/typebox").TLiteral<"TRUNCATE">, import("@sinclair/typebox").TLiteral<"REFERENCES">, import("@sinclair/typebox").TLiteral<"TRIGGER">]>;
    is_grantable: import("@sinclair/typebox").TBoolean;
    with_hierarchy: import("@sinclair/typebox").TBoolean;
}>;
export declare type PostgresGrant = Static<typeof postgresGrantSchema>;
export declare const postgresPolicySchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TInteger;
    schema: import("@sinclair/typebox").TString;
    table: import("@sinclair/typebox").TString;
    table_id: import("@sinclair/typebox").TInteger;
    name: import("@sinclair/typebox").TString;
    action: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"PERMISSIVE">, import("@sinclair/typebox").TLiteral<"RESTRICTIVE">]>;
    roles: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
    command: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"SELECT">, import("@sinclair/typebox").TLiteral<"INSERT">, import("@sinclair/typebox").TLiteral<"UPDATE">, import("@sinclair/typebox").TLiteral<"DELETE">, import("@sinclair/typebox").TLiteral<"ALL">]>;
    definition: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TNull]>;
    check: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TNull]>;
}>;
export declare type PostgresPolicy = Static<typeof postgresPolicySchema>;
export declare const postgresPrimaryKeySchema: import("@sinclair/typebox").TObject<{
    schema: import("@sinclair/typebox").TString;
    table_name: import("@sinclair/typebox").TString;
    name: import("@sinclair/typebox").TString;
    table_id: import("@sinclair/typebox").TInteger;
}>;
export declare type PostgresPrimaryKey = Static<typeof postgresPrimaryKeySchema>;
export declare const postgresPublicationSchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TInteger;
    name: import("@sinclair/typebox").TString;
    owner: import("@sinclair/typebox").TString;
    publish_insert: import("@sinclair/typebox").TBoolean;
    publish_update: import("@sinclair/typebox").TBoolean;
    publish_delete: import("@sinclair/typebox").TBoolean;
    publish_truncate: import("@sinclair/typebox").TBoolean;
    tables: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
        id: import("@sinclair/typebox").TInteger;
        name: import("@sinclair/typebox").TString;
        schema: import("@sinclair/typebox").TString;
    }>>, import("@sinclair/typebox").TNull]>;
}>;
export declare type PostgresPublication = Static<typeof postgresPublicationSchema>;
export declare const postgresRelationshipSchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TInteger;
    constraint_name: import("@sinclair/typebox").TString;
    source_schema: import("@sinclair/typebox").TString;
    source_table_name: import("@sinclair/typebox").TString;
    source_column_name: import("@sinclair/typebox").TString;
    target_table_schema: import("@sinclair/typebox").TString;
    target_table_name: import("@sinclair/typebox").TString;
    target_column_name: import("@sinclair/typebox").TString;
}>;
export declare type PostgresRelationship = Static<typeof postgresRelationshipSchema>;
export declare const postgresRoleSchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TInteger;
    name: import("@sinclair/typebox").TString;
    is_superuser: import("@sinclair/typebox").TBoolean;
    can_create_db: import("@sinclair/typebox").TBoolean;
    can_create_role: import("@sinclair/typebox").TBoolean;
    inherit_role: import("@sinclair/typebox").TBoolean;
    can_login: import("@sinclair/typebox").TBoolean;
    is_replication_role: import("@sinclair/typebox").TBoolean;
    can_bypass_rls: import("@sinclair/typebox").TBoolean;
    active_connections: import("@sinclair/typebox").TInteger;
    connection_limit: import("@sinclair/typebox").TInteger;
    password: import("@sinclair/typebox").TString;
    valid_until: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TNull]>;
    config: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TNull]>;
    grants: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
        table_id: import("@sinclair/typebox").TInteger;
        grantor: import("@sinclair/typebox").TString;
        grantee: import("@sinclair/typebox").TString;
        schema: import("@sinclair/typebox").TString;
        table_name: import("@sinclair/typebox").TString;
        privilege_type: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"INSERT">, import("@sinclair/typebox").TLiteral<"SELECT">, import("@sinclair/typebox").TLiteral<"UPDATE">, import("@sinclair/typebox").TLiteral<"DELETE">, import("@sinclair/typebox").TLiteral<"TRUNCATE">, import("@sinclair/typebox").TLiteral<"REFERENCES">, import("@sinclair/typebox").TLiteral<"TRIGGER">]>;
        is_grantable: import("@sinclair/typebox").TBoolean;
        with_hierarchy: import("@sinclair/typebox").TBoolean;
    }>>;
}>;
export declare type PostgresRole = Static<typeof postgresRoleSchema>;
export declare const postgresSchemaSchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TInteger;
    name: import("@sinclair/typebox").TString;
    owner: import("@sinclair/typebox").TString;
}>;
export declare type PostgresSchema = Static<typeof postgresSchemaSchema>;
export declare const postgresSchemaCreateSchema: import("@sinclair/typebox").TObject<{
    name: import("@sinclair/typebox").TString;
    owner: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
}>;
export declare type PostgresSchemaCreate = Static<typeof postgresSchemaCreateSchema>;
export declare const postgresSchemaUpdateSchema: import("@sinclair/typebox").TObject<{
    name: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    owner: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
}>;
export declare type PostgresSchemaUpdate = Static<typeof postgresSchemaUpdateSchema>;
export declare const postgresTableSchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TInteger;
    schema: import("@sinclair/typebox").TString;
    name: import("@sinclair/typebox").TString;
    rls_enabled: import("@sinclair/typebox").TBoolean;
    rls_forced: import("@sinclair/typebox").TBoolean;
    replica_identity: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"DEFAULT">, import("@sinclair/typebox").TLiteral<"INDEX">, import("@sinclair/typebox").TLiteral<"FULL">, import("@sinclair/typebox").TLiteral<"NOTHING">]>;
    bytes: import("@sinclair/typebox").TInteger;
    size: import("@sinclair/typebox").TString;
    live_rows_estimate: import("@sinclair/typebox").TInteger;
    dead_rows_estimate: import("@sinclair/typebox").TInteger;
    comment: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TNull]>;
    columns: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
        table_id: import("@sinclair/typebox").TInteger;
        schema: import("@sinclair/typebox").TString;
        table: import("@sinclair/typebox").TString;
        id: import("@sinclair/typebox").TString;
        ordinal_position: import("@sinclair/typebox").TInteger;
        name: import("@sinclair/typebox").TString;
        default_value: import("@sinclair/typebox").TUnknown;
        data_type: import("@sinclair/typebox").TString;
        format: import("@sinclair/typebox").TString;
        is_identity: import("@sinclair/typebox").TBoolean;
        identity_generation: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"ALWAYS">, import("@sinclair/typebox").TLiteral<"BY DEFAULT">, import("@sinclair/typebox").TNull]>;
        is_nullable: import("@sinclair/typebox").TBoolean;
        is_updatable: import("@sinclair/typebox").TBoolean;
        is_unique: import("@sinclair/typebox").TBoolean;
        enums: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TUnknown>;
        comment: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TNull]>;
    }>>;
    grants: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
        table_id: import("@sinclair/typebox").TInteger;
        grantor: import("@sinclair/typebox").TString;
        grantee: import("@sinclair/typebox").TString;
        schema: import("@sinclair/typebox").TString;
        table_name: import("@sinclair/typebox").TString;
        privilege_type: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"INSERT">, import("@sinclair/typebox").TLiteral<"SELECT">, import("@sinclair/typebox").TLiteral<"UPDATE">, import("@sinclair/typebox").TLiteral<"DELETE">, import("@sinclair/typebox").TLiteral<"TRUNCATE">, import("@sinclair/typebox").TLiteral<"REFERENCES">, import("@sinclair/typebox").TLiteral<"TRIGGER">]>;
        is_grantable: import("@sinclair/typebox").TBoolean;
        with_hierarchy: import("@sinclair/typebox").TBoolean;
    }>>;
    policies: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
        id: import("@sinclair/typebox").TInteger;
        schema: import("@sinclair/typebox").TString;
        table: import("@sinclair/typebox").TString;
        table_id: import("@sinclair/typebox").TInteger;
        name: import("@sinclair/typebox").TString;
        action: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"PERMISSIVE">, import("@sinclair/typebox").TLiteral<"RESTRICTIVE">]>;
        roles: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
        command: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"SELECT">, import("@sinclair/typebox").TLiteral<"INSERT">, import("@sinclair/typebox").TLiteral<"UPDATE">, import("@sinclair/typebox").TLiteral<"DELETE">, import("@sinclair/typebox").TLiteral<"ALL">]>;
        definition: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TNull]>;
        check: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TNull]>;
    }>>;
    primary_keys: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
        schema: import("@sinclair/typebox").TString;
        table_name: import("@sinclair/typebox").TString;
        name: import("@sinclair/typebox").TString;
        table_id: import("@sinclair/typebox").TInteger;
    }>>;
    relationships: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
        id: import("@sinclair/typebox").TInteger;
        constraint_name: import("@sinclair/typebox").TString;
        source_schema: import("@sinclair/typebox").TString;
        source_table_name: import("@sinclair/typebox").TString;
        source_column_name: import("@sinclair/typebox").TString;
        target_table_schema: import("@sinclair/typebox").TString;
        target_table_name: import("@sinclair/typebox").TString;
        target_column_name: import("@sinclair/typebox").TString;
    }>>;
}>;
export declare type PostgresTable = Static<typeof postgresTableSchema>;
export declare const postgresTriggerSchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TInteger;
    table_id: import("@sinclair/typebox").TInteger;
    enabled_mode: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"ORIGIN">, import("@sinclair/typebox").TLiteral<"REPLICA">, import("@sinclair/typebox").TLiteral<"ALWAYS">, import("@sinclair/typebox").TLiteral<"DISABLED">]>;
    name: import("@sinclair/typebox").TString;
    table: import("@sinclair/typebox").TString;
    schema: import("@sinclair/typebox").TString;
    condition: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TNull]>;
    orientation: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"ROW">, import("@sinclair/typebox").TLiteral<"STATEMENT">]>;
    activation: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"BEFORE">, import("@sinclair/typebox").TLiteral<"AFTER">, import("@sinclair/typebox").TLiteral<"INSTEAD OF">]>;
    events: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
    function_schema: import("@sinclair/typebox").TString;
    function_name: import("@sinclair/typebox").TString;
    function_args: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
}>;
export declare type PostgresTrigger = Static<typeof postgresTriggerSchema>;
export declare const postgresTypeSchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TInteger;
    name: import("@sinclair/typebox").TString;
    schema: import("@sinclair/typebox").TString;
    format: import("@sinclair/typebox").TString;
    enums: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TUnknown>;
    comment: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TNull]>;
}>;
export declare type PostgresType = Static<typeof postgresTypeSchema>;
export declare const postgresVersionSchema: import("@sinclair/typebox").TObject<{
    version: import("@sinclair/typebox").TString;
    version_number: import("@sinclair/typebox").TInteger;
    active_connections: import("@sinclair/typebox").TInteger;
    max_connections: import("@sinclair/typebox").TInteger;
}>;
export declare type PostgresVersion = Static<typeof postgresVersionSchema>;
export {};
//# sourceMappingURL=types.d.ts.map