var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ident, literal } from 'pg-format';
import { DEFAULT_SYSTEM_SCHEMAS } from './constants';
import { policiesSql } from './sql';
export default class PostgresMetaPolicies {
    constructor(query) {
        this.query = query;
    }
    list({ includeSystemSchemas = false, limit, offset, } = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            let sql = policiesSql;
            if (!includeSystemSchemas) {
                sql = `${sql} WHERE NOT (n.nspname IN (${DEFAULT_SYSTEM_SCHEMAS.map(literal).join(',')}))`;
            }
            if (limit) {
                sql = `${sql} LIMIT ${limit}`;
            }
            if (offset) {
                sql = `${sql} OFFSET ${offset}`;
            }
            return yield this.query(sql);
        });
    }
    retrieve({ id, name, table, schema = 'public', }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (id) {
                const sql = `${policiesSql} WHERE pol.oid = ${literal(id)};`;
                const { data, error } = yield this.query(sql);
                if (error) {
                    return { data, error };
                }
                else if (data.length === 0) {
                    return { data: null, error: { message: `Cannot find a policy with ID ${id}` } };
                }
                else {
                    return { data: data[0], error };
                }
            }
            else if (name && table) {
                const sql = `${policiesSql} WHERE pol.polname = ${literal(name)} AND n.nspname = ${literal(schema)} AND c.relname = ${literal(table)};`;
                const { data, error } = yield this.query(sql);
                if (error) {
                    return { data, error };
                }
                else if (data.length === 0) {
                    return {
                        data: null,
                        error: { message: `Cannot find a policy named ${name} for table ${schema}.${table}` },
                    };
                }
                else {
                    return { data: data[0], error };
                }
            }
            else {
                return { data: null, error: { message: 'Invalid parameters on policy retrieve' } };
            }
        });
    }
    create({ name, table, schema = 'public', definition, check, action = 'PERMISSIVE', command = 'ALL', roles = ['PUBLIC'], }) {
        return __awaiter(this, void 0, void 0, function* () {
            const definitionClause = definition === undefined ? '' : `USING (${definition})`;
            const checkClause = check === undefined ? '' : `WITH CHECK (${check})`;
            const sql = `
CREATE POLICY ${ident(name)} ON ${ident(schema)}.${ident(table)}
  AS ${action}
  FOR ${command}
  TO ${roles.join(',')}
  ${definitionClause} ${checkClause};`;
            const { error } = yield this.query(sql);
            if (error) {
                return { data: null, error };
            }
            return yield this.retrieve({ name, table, schema });
        });
    }
    update(id, { name, definition, check, roles, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data: old, error } = yield this.retrieve({ id });
            if (error) {
                return { data: null, error };
            }
            const alter = `ALTER POLICY ${ident(old.name)} ON ${ident(old.schema)}.${ident(old.table)}`;
            const nameSql = name === undefined ? '' : `${alter} RENAME TO ${ident(name)};`;
            const definitionSql = definition === undefined ? '' : `${alter} USING (${definition});`;
            const checkSql = check === undefined ? '' : `${alter} WITH CHECK (${check});`;
            const rolesSql = roles === undefined ? '' : `${alter} TO (${roles.join(',')});`;
            // nameSql must be last
            const sql = `BEGIN; ${definitionSql} ${checkSql} ${rolesSql} ${nameSql} COMMIT;`;
            {
                const { error } = yield this.query(sql);
                if (error) {
                    return { data: null, error };
                }
            }
            return yield this.retrieve({ id });
        });
    }
    remove(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data: policy, error } = yield this.retrieve({ id });
            if (error) {
                return { data: null, error };
            }
            const sql = `DROP POLICY ${ident(policy.name)} ON ${ident(policy.schema)}.${ident(policy.table)};`;
            {
                const { error } = yield this.query(sql);
                if (error) {
                    return { data: null, error };
                }
            }
            return { data: policy, error: null };
        });
    }
}
//# sourceMappingURL=PostgresMetaPolicies.js.map