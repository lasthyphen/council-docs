var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { literal } from 'pg-format';
import { DEFAULT_SYSTEM_SCHEMAS } from './constants';
import { typesSql } from './sql';
export default class PostgresMetaTypes {
    constructor(query) {
        this.query = query;
    }
    list({ includeSystemSchemas = false, limit, offset, } = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            let sql = typesSql;
            if (!includeSystemSchemas) {
                sql = `${sql} AND NOT (n.nspname IN (${DEFAULT_SYSTEM_SCHEMAS.map(literal).join(',')}))`;
            }
            if (limit) {
                sql = `${sql} LIMIT ${limit}`;
            }
            if (offset) {
                sql = `${sql} OFFSET ${offset}`;
            }
            return yield this.query(sql);
        });
    }
}
//# sourceMappingURL=PostgresMetaTypes.js.map