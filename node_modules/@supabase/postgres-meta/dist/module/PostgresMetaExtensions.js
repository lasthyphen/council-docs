var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ident, literal } from 'pg-format';
import { extensionsSql } from './sql';
export default class PostgresMetaExtensions {
    constructor(query) {
        this.query = query;
    }
    list({ limit, offset, } = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            let sql = extensionsSql;
            if (limit) {
                sql = `${sql} LIMIT ${limit}`;
            }
            if (offset) {
                sql = `${sql} OFFSET ${offset}`;
            }
            return yield this.query(sql);
        });
    }
    retrieve({ name }) {
        return __awaiter(this, void 0, void 0, function* () {
            const sql = `${extensionsSql} WHERE name = ${literal(name)};`;
            const { data, error } = yield this.query(sql);
            if (error) {
                return { data, error };
            }
            else if (data.length === 0) {
                return { data: null, error: { message: `Cannot find an extension named ${name}` } };
            }
            else {
                return { data: data[0], error };
            }
        });
    }
    create({ name, schema, version, cascade = false, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const sql = `
CREATE EXTENSION ${ident(name)}
  ${schema === undefined ? '' : `SCHEMA ${ident(schema)}`}
  ${version === undefined ? '' : `VERSION ${literal(version)}`}
  ${cascade ? 'CASCADE' : ''};`;
            const { error } = yield this.query(sql);
            if (error) {
                return { data: null, error };
            }
            return yield this.retrieve({ name });
        });
    }
    update(name, { update = false, version, schema, }) {
        return __awaiter(this, void 0, void 0, function* () {
            let updateSql = '';
            if (update) {
                updateSql = `ALTER EXTENSION ${ident(name)} UPDATE ${version === undefined ? '' : `TO ${literal(version)}`};`;
            }
            const schemaSql = schema === undefined ? '' : `ALTER EXTENSION ${ident(name)} SET SCHEMA ${ident(schema)};`;
            const sql = `BEGIN; ${updateSql} ${schemaSql} COMMIT;`;
            const { error } = yield this.query(sql);
            if (error) {
                return { data: null, error };
            }
            return yield this.retrieve({ name });
        });
    }
    remove(name, { cascade = false } = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data: extension, error } = yield this.retrieve({ name });
            if (error) {
                return { data: null, error };
            }
            const sql = `DROP EXTENSION ${ident(name)} ${cascade ? 'CASCADE' : 'RESTRICT'};`;
            {
                const { error } = yield this.query(sql);
                if (error) {
                    return { data: null, error };
                }
            }
            return { data: extension, error: null };
        });
    }
}
//# sourceMappingURL=PostgresMetaExtensions.js.map