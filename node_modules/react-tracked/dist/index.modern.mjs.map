{"version":3,"file":"index.modern.mjs","sources":["../src/utils.ts","../src/createTrackedSelector.ts","../src/createContainer.ts","../src/memo.ts"],"sourcesContent":["import { useEffect, useRef, useDebugValue } from 'react';\nimport { affectedToPathList } from 'proxy-compare';\n\ntype Obj = Record<string, unknown>;\n\nexport const useAffectedDebugValue = <State>(\n  state: State,\n  affected: WeakMap<Obj, unknown>,\n) => {\n  const pathList = useRef<(string | number | symbol)[][]>();\n  useEffect(() => {\n    pathList.current = affectedToPathList(state, affected);\n  });\n  useDebugValue(state);\n};\n","import {\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n} from 'react';\nimport { createProxy, isChanged } from 'proxy-compare';\n\nimport { useAffectedDebugValue } from './utils';\n\nexport const createTrackedSelector = <State>(\n  useSelector: <Selected>(selector: (state: State) => Selected) => Selected,\n) => {\n  const useTrackedSelector = () => {\n    const [, forceUpdate] = useReducer((c) => c + 1, 0);\n    const affected = new WeakMap();\n    const lastAffected = useRef<typeof affected>();\n    const prevState = useRef<State>();\n    const lastState = useRef<State>();\n    useEffect(() => {\n      lastAffected.current = affected;\n      if (prevState.current !== lastState.current\n        && isChanged(\n          prevState.current,\n          lastState.current,\n          affected,\n          new WeakMap(),\n        )) {\n        prevState.current = lastState.current;\n        forceUpdate();\n      }\n    });\n    const selector = useCallback((nextState: State) => {\n      lastState.current = nextState;\n      if (prevState.current\n        && prevState.current !== nextState\n        && lastAffected.current\n        && !isChanged(\n          prevState.current,\n          nextState,\n          lastAffected.current,\n          new WeakMap(),\n        )\n      ) {\n        // not changed\n        return prevState.current;\n      }\n      prevState.current = nextState;\n      return nextState;\n    }, []);\n    const state = useSelector(selector);\n    if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      useAffectedDebugValue(state, affected);\n    }\n    const proxyCache = useMemo(() => new WeakMap(), []); // per-hook proxyCache\n    return createProxy(state, affected, proxyCache);\n  };\n  return useTrackedSelector;\n};\n","/* eslint react/destructuring-assignment: off */\n\nimport {\n  FC,\n  createContext as createContextOrig,\n  createElement,\n  useCallback,\n  useContext as useContextOrig,\n  useDebugValue,\n} from 'react';\n\nimport {\n  Context,\n  createContext,\n  useContextSelector,\n  useContextUpdate,\n} from 'use-context-selector';\n\nimport { createTrackedSelector } from './createTrackedSelector';\n\nconst warningObject = new Proxy({}, {\n  get() { throw new Error('Please use <Provider>'); },\n  apply() { throw new Error('Please use <Provider>'); },\n});\n\ntype AnyFunction = (...args: any[]) => any;\n\nexport const createContainer = <State, Update extends AnyFunction, Props>(\n  useValue: (props: Props) => readonly [State, Update],\n  concurrentMode = false,\n) => {\n  const StateContext = createContext(warningObject as State);\n  const UpdateContext = createContextOrig(warningObject as Update);\n\n  const Provider: FC<Props> = (props) => {\n    const [state, update] = useValue(props);\n    return createElement(UpdateContext.Provider, { value: update },\n      createElement(StateContext.Provider, { value: state }, props.children));\n  };\n\n  const useSelector = <Selected>(\n    selector: (state: State) => Selected,\n  ) => {\n    const selected = useContextSelector(StateContext, selector);\n    useDebugValue(selected);\n    return selected;\n  };\n\n  const useTrackedState = createTrackedSelector(useSelector);\n\n  const useUpdate = concurrentMode\n    ? () => {\n      const contextUpdate = useContextUpdate(StateContext as Context<unknown>);\n      const update = useContextOrig(UpdateContext);\n      return useCallback((...args: Parameters<Update>) => {\n        let result: ReturnType<Update> | undefined;\n        contextUpdate(() => {\n          result = update(...args);\n        });\n        return result as ReturnType<Update>;\n      }, [contextUpdate, update]);\n    }\n    // not concurrentMode\n    : () => useContextOrig(UpdateContext);\n\n  const useTracked = () => [useTrackedState(), useUpdate()] as [\n    ReturnType<typeof useTrackedState>,\n    ReturnType<typeof useUpdate>,\n  ];\n\n  return {\n    Provider,\n    useTrackedState,\n    useTracked,\n    useUpdate,\n    useSelector,\n  } as const;\n};\n","import { createElement, memo as reactMemo, forwardRef } from 'react';\nimport { trackMemo } from 'proxy-compare';\n\nimport type {\n  FC,\n  PropsWithChildren,\n  NamedExoticComponent,\n  ComponentType,\n  ComponentProps,\n  MemoExoticComponent,\n} from 'react';\n\nexport function memo<P extends Record<string, unknown>>(\n  Component: FC<P>,\n  propsAreEqual?: (\n    prevProps: Readonly<PropsWithChildren<P>>,\n    nextProps: Readonly<PropsWithChildren<P>>,\n  ) => boolean,\n): NamedExoticComponent<P>;\n\nexport function memo<T extends ComponentType<any>>(\n  Component: T,\n  propsAreEqual?: (\n    prevProps: Readonly<ComponentProps<T>>,\n    nextProps: Readonly<ComponentProps<T>>,\n  ) => boolean,\n): MemoExoticComponent<T>;\n\nexport function memo(Component: any, propsAreEqual?: any) {\n  const WrappedComponent = forwardRef((props: any, ref: any) => {\n    Object.values(props).forEach(trackMemo);\n    return createElement(Component, { ...props, ref });\n  });\n  return reactMemo(WrappedComponent, propsAreEqual);\n}\n"],"names":["useAffectedDebugValue","state","affected","pathList","useRef","useEffect","current","affectedToPathList","useDebugValue","createTrackedSelector","useSelector","useTrackedSelector","forceUpdate","useReducer","c","WeakMap","lastAffected","prevState","lastState","isChanged","selector","useCallback","nextState","process","env","NODE_ENV","proxyCache","useMemo","createProxy","warningObject","Proxy","get","Error","apply","createContainer","useValue","concurrentMode","StateContext","createContext","UpdateContext","createContextOrig","Provider","props","update","createElement","value","children","selected","useContextSelector","useTrackedState","useUpdate","contextUpdate","useContextUpdate","useContextOrig","args","result","useTracked","memo","Component","propsAreEqual","WrappedComponent","forwardRef","ref","Object","values","forEach","trackMemo","reactMemo"],"mappings":"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"}