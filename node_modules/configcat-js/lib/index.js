"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OverrideBehaviour = exports.DataGovernance = exports.createFlagOverridesFromMap = exports.createConsoleLogger = exports.createClientWithLazyLoad = exports.createClientWithManualPoll = exports.createClientWithAutoPoll = exports.createClient = void 0;
var configcatcommon = require("configcat-common");
var ConfigFetcher_1 = require("./ConfigFetcher");
var Cache_1 = require("./Cache");
var Version_1 = require("./Version");
/**
 * Create an instance of ConfigCatClient and setup Auto polling with default options.
 * @param {string} sdkkey - SDK Key to access your configuration.
 * @param options - Options for Auto polling
 */
function createClient(sdkkey, options) {
    return createClientWithAutoPoll(sdkkey, options);
}
exports.createClient = createClient;
/**
 * Create an instance of ConfigCatClient and setup Auto polling.
 * @param {string} sdkkey - SDK Key to access your configuration.
 * @param options - Options for Auto polling
 */
function createClientWithAutoPoll(sdkKey, options) {
    return configcatcommon.createClientWithAutoPoll(sdkKey, {
        configFetcher: new ConfigFetcher_1.HttpConfigFetcher(),
        cache: new Cache_1.LocalStorageCache(),
        sdkType: "ConfigCat-JS",
        sdkVersion: Version_1.default
    }, options);
}
exports.createClientWithAutoPoll = createClientWithAutoPoll;
/**
 * Create an instance of ConfigCatClient and setup Manual polling.
 * @param {string} sdkKey - SDK Key to access your configuration.
 * @param options - Options for Manual polling
 */
function createClientWithManualPoll(sdkKey, options) {
    return configcatcommon.createClientWithManualPoll(sdkKey, {
        configFetcher: new ConfigFetcher_1.HttpConfigFetcher(),
        cache: new Cache_1.LocalStorageCache(),
        sdkType: "ConfigCat-JS",
        sdkVersion: Version_1.default
    }, options);
}
exports.createClientWithManualPoll = createClientWithManualPoll;
/**
 * Create an instance of ConfigCatClient and setup Lazy loading.
 * @param {string} sdkKey - SDK Key to access your configuration.
 * @param options - Options for Lazy loading
 */
function createClientWithLazyLoad(sdkKey, options) {
    return configcatcommon.createClientWithLazyLoad(sdkKey, {
        configFetcher: new ConfigFetcher_1.HttpConfigFetcher(),
        cache: new Cache_1.LocalStorageCache(),
        sdkType: "ConfigCat-JS",
        sdkVersion: Version_1.default
    }, options);
}
exports.createClientWithLazyLoad = createClientWithLazyLoad;
function createConsoleLogger(logLevel) {
    return configcatcommon.createConsoleLogger(logLevel);
}
exports.createConsoleLogger = createConsoleLogger;
function createFlagOverridesFromMap(map, behaviour) {
    return new configcatcommon.FlagOverrides(new configcatcommon.MapOverrideDataSource(map), behaviour);
}
exports.createFlagOverridesFromMap = createFlagOverridesFromMap;
exports.DataGovernance = {
    /** Select this if your feature flags are published to all global CDN nodes. */
    Global: configcatcommon.DataGovernance.Global,
    /** Select this if your feature flags are published to CDN nodes only in the EU. */
    EuOnly: configcatcommon.DataGovernance.EuOnly
};
exports.OverrideBehaviour = {
    /**
     * When evaluating values, the SDK will not use feature flags and settings from the ConfigCat CDN, but it will use
     * all feature flags and settings that are loaded from local-override sources.
     */
    LocalOnly: configcatcommon.OverrideBehaviour.LocalOnly,
    /**
     * When evaluating values, the SDK will use all feature flags and settings that are downloaded from the ConfigCat CDN,
     * plus all feature flags and settings that are loaded from local-override sources. If a feature flag or a setting is
     * defined both in the fetched and the local-override source then the local-override version will take precedence.
     */
    LocalOverRemote: configcatcommon.OverrideBehaviour.LocalOverRemote,
    /**
     * When evaluating values, the SDK will use all feature flags and settings that are downloaded from the ConfigCat CDN,
     * plus all feature flags and settings that are loaded from local-override sources. If a feature flag or a setting is
     * defined both in the fetched and the local-override source then the fetched version will take precedence.
     */
    RemoteOverLocal: configcatcommon.OverrideBehaviour.RemoteOverLocal,
};
exports.default = createClient;
