import * as configcatcommon from "configcat-common";
import { IConfigCatClient, LogLevel } from "configcat-common";
/**
 * Create an instance of ConfigCatClient and setup Auto polling with default options.
 * @param {string} sdkkey - SDK Key to access your configuration.
 * @param options - Options for Auto polling
 */
export declare function createClient(sdkkey: string, options?: IJSAutoPollOptions): IConfigCatClient;
/**
 * Create an instance of ConfigCatClient and setup Auto polling.
 * @param {string} sdkkey - SDK Key to access your configuration.
 * @param options - Options for Auto polling
 */
export declare function createClientWithAutoPoll(sdkKey: string, options?: IJSAutoPollOptions): IConfigCatClient;
/**
 * Create an instance of ConfigCatClient and setup Manual polling.
 * @param {string} sdkKey - SDK Key to access your configuration.
 * @param options - Options for Manual polling
 */
export declare function createClientWithManualPoll(sdkKey: string, options?: IJSManualPollOptions): IConfigCatClient;
/**
 * Create an instance of ConfigCatClient and setup Lazy loading.
 * @param {string} sdkKey - SDK Key to access your configuration.
 * @param options - Options for Lazy loading
 */
export declare function createClientWithLazyLoad(sdkKey: string, options?: IJSLazyLoadingOptions): IConfigCatClient;
export declare function createConsoleLogger(logLevel: LogLevel): configcatcommon.IConfigCatLogger;
export declare function createFlagOverridesFromMap(map: {
    [name: string]: any;
}, behaviour: number): configcatcommon.FlagOverrides;
export declare type IJSAutoPollOptions = configcatcommon.IAutoPollOptions;
export declare type IJSLazyLoadingOptions = configcatcommon.ILazyLoadingOptions;
export declare type IJSManualPollOptions = configcatcommon.IManualPollOptions;
export declare const DataGovernance: {
    /** Select this if your feature flags are published to all global CDN nodes. */
    Global: configcatcommon.DataGovernance;
    /** Select this if your feature flags are published to CDN nodes only in the EU. */
    EuOnly: configcatcommon.DataGovernance;
};
export declare const OverrideBehaviour: {
    /**
     * When evaluating values, the SDK will not use feature flags and settings from the ConfigCat CDN, but it will use
     * all feature flags and settings that are loaded from local-override sources.
     */
    LocalOnly: configcatcommon.OverrideBehaviour;
    /**
     * When evaluating values, the SDK will use all feature flags and settings that are downloaded from the ConfigCat CDN,
     * plus all feature flags and settings that are loaded from local-override sources. If a feature flag or a setting is
     * defined both in the fetched and the local-override source then the local-override version will take precedence.
     */
    LocalOverRemote: configcatcommon.OverrideBehaviour;
    /**
     * When evaluating values, the SDK will use all feature flags and settings that are downloaded from the ConfigCat CDN,
     * plus all feature flags and settings that are loaded from local-override sources. If a feature flag or a setting is
     * defined both in the fetched and the local-override source then the fetched version will take precedence.
     */
    RemoteOverLocal: configcatcommon.OverrideBehaviour;
};
export default createClient;
//# sourceMappingURL=index.d.ts.map