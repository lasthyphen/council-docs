"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OverrideBehaviour = exports.MapOverrideDataSource = exports.FlagOverrides = exports.User = exports.DataGovernance = exports.OptionsBase = exports.ProjectConfig = exports.FetchResult = exports.FetchStatus = exports.LogLevel = exports.createConsoleLogger = exports.createClientWithLazyLoad = exports.createClientWithManualPoll = exports.createClientWithAutoPoll = void 0;
var ConfigCatClient_1 = require("./ConfigCatClient");
var ConfigCatClientOptions_1 = require("./ConfigCatClientOptions");
var ConfigCatLogger_1 = require("./ConfigCatLogger");
var Polyfills_1 = require("./Polyfills");
(0, Polyfills_1.setupPolyfills)();
/**
 * Create an instance of ConfigCatClient and setup AutoPoll mode
 * @param {string} apiKey - ApiKey to access your configuration.
 * @param config - Configuration for autoPoll mode
 */
function createClientWithAutoPoll(apiKey, configCatKernel, options) {
    return new ConfigCatClient_1.ConfigCatClient(new ConfigCatClientOptions_1.AutoPollOptions(apiKey, configCatKernel.sdkType, configCatKernel.sdkVersion, options, configCatKernel.cache), configCatKernel);
}
exports.createClientWithAutoPoll = createClientWithAutoPoll;
/**
 * Create an instance of ConfigCatClient and setup ManualPoll mode
 * @param {string} apiKey - ApiKey to access your configuration.
 * @param config - Configuration for manualPoll mode
 */
function createClientWithManualPoll(apiKey, configCatKernel, options) {
    return new ConfigCatClient_1.ConfigCatClient(new ConfigCatClientOptions_1.ManualPollOptions(apiKey, configCatKernel.sdkType, configCatKernel.sdkVersion, options, configCatKernel.cache), configCatKernel);
}
exports.createClientWithManualPoll = createClientWithManualPoll;
/**
 * Create an instance of ConfigCatClient and setup LazyLoad mode
 * @param {string} apiKey - ApiKey to access your configuration.
 * @param config - Configuration for lazyLoad mode
 */
function createClientWithLazyLoad(apiKey, configCatKernel, options) {
    return new ConfigCatClient_1.ConfigCatClient(new ConfigCatClientOptions_1.LazyLoadOptions(apiKey, configCatKernel.sdkType, configCatKernel.sdkVersion, options, configCatKernel.cache), configCatKernel);
}
exports.createClientWithLazyLoad = createClientWithLazyLoad;
/**
 * Create an instance of ConfigCatConsoleLogger
 * @param {LogLevel} logLevel - Specifies message's filtering to output for the CofigCatConsoleLogger.
 */
function createConsoleLogger(logLevel) {
    return new ConfigCatLogger_1.ConfigCatConsoleLogger(logLevel);
}
exports.createConsoleLogger = createConsoleLogger;
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Debug"] = 4] = "Debug";
    LogLevel[LogLevel["Info"] = 3] = "Info";
    LogLevel[LogLevel["Warn"] = 2] = "Warn";
    LogLevel[LogLevel["Error"] = 1] = "Error";
    LogLevel[LogLevel["Off"] = -1] = "Off";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
var FetchStatus;
(function (FetchStatus) {
    FetchStatus[FetchStatus["Fetched"] = 0] = "Fetched";
    FetchStatus[FetchStatus["NotModified"] = 1] = "NotModified";
    FetchStatus[FetchStatus["Errored"] = 2] = "Errored";
})(FetchStatus = exports.FetchStatus || (exports.FetchStatus = {}));
var FetchResult = /** @class */ (function () {
    function FetchResult(status, responseBody, eTag) {
        this.status = status;
        this.responseBody = responseBody;
        this.eTag = eTag;
    }
    FetchResult.success = function (responseBody, eTag) {
        return new FetchResult(FetchStatus.Fetched, responseBody, eTag);
    };
    FetchResult.notModified = function () {
        return new FetchResult(FetchStatus.NotModified, "");
    };
    FetchResult.error = function () {
        return new FetchResult(FetchStatus.Errored, "");
    };
    return FetchResult;
}());
exports.FetchResult = FetchResult;
var ProjectConfig_1 = require("./ProjectConfig");
Object.defineProperty(exports, "ProjectConfig", { enumerable: true, get: function () { return ProjectConfig_1.ProjectConfig; } });
var ConfigCatClientOptions_2 = require("./ConfigCatClientOptions");
Object.defineProperty(exports, "OptionsBase", { enumerable: true, get: function () { return ConfigCatClientOptions_2.OptionsBase; } });
Object.defineProperty(exports, "DataGovernance", { enumerable: true, get: function () { return ConfigCatClientOptions_2.DataGovernance; } });
var RolloutEvaluator_1 = require("./RolloutEvaluator");
Object.defineProperty(exports, "User", { enumerable: true, get: function () { return RolloutEvaluator_1.User; } });
var FlagOverrides_1 = require("./FlagOverrides");
Object.defineProperty(exports, "FlagOverrides", { enumerable: true, get: function () { return FlagOverrides_1.FlagOverrides; } });
Object.defineProperty(exports, "MapOverrideDataSource", { enumerable: true, get: function () { return FlagOverrides_1.MapOverrideDataSource; } });
Object.defineProperty(exports, "OverrideBehaviour", { enumerable: true, get: function () { return FlagOverrides_1.OverrideBehaviour; } });
