"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingKeyValue = exports.ConfigCatClient = void 0;
var ConfigCatClientOptions_1 = require("./ConfigCatClientOptions");
var AutoPollConfigService_1 = require("./AutoPollConfigService");
var LazyLoadConfigService_1 = require("./LazyLoadConfigService");
var ManualPollService_1 = require("./ManualPollService");
var RolloutEvaluator_1 = require("./RolloutEvaluator");
var ProjectConfig_1 = require("./ProjectConfig");
var FlagOverrides_1 = require("./FlagOverrides");
var Utils_1 = require("./Utils");
var ConfigCatClient = /** @class */ (function () {
    function ConfigCatClient(options, configCatKernel) {
        var _a;
        if (!options) {
            throw new Error("Invalid 'options' value");
        }
        this.options = options;
        this.options.logger.debug('Initializing ConfigCatClient. Options: ' + JSON.stringify(this.options));
        if (!configCatKernel) {
            throw new Error("Invalid 'configCatKernel' value");
        }
        if (!configCatKernel.configFetcher) {
            throw new Error("Invalid 'configCatKernel.configFetcher' value");
        }
        this.evaluator = new RolloutEvaluator_1.RolloutEvaluator(options.logger);
        if (((_a = options === null || options === void 0 ? void 0 : options.flagOverrides) === null || _a === void 0 ? void 0 : _a.behaviour) != FlagOverrides_1.OverrideBehaviour.LocalOnly) {
            if (options && options instanceof ConfigCatClientOptions_1.LazyLoadOptions) {
                this.configService = new LazyLoadConfigService_1.LazyLoadConfigService(configCatKernel.configFetcher, options);
            }
            else if (options && options instanceof ConfigCatClientOptions_1.ManualPollOptions) {
                this.configService = new ManualPollService_1.ManualPollService(configCatKernel.configFetcher, options);
            }
            else if (options && options instanceof ConfigCatClientOptions_1.AutoPollOptions) {
                this.configService = new AutoPollConfigService_1.AutoPollConfigService(configCatKernel.configFetcher, options);
            }
            else {
                throw new Error("Invalid 'options' value");
            }
        }
    }
    ConfigCatClient.prototype.dispose = function () {
        this.options.logger.debug("dispose() called");
        if (this.configService instanceof AutoPollConfigService_1.AutoPollConfigService) {
            this.options.logger.debug("Disposing AutoPollConfigService");
            this.configService.dispose();
        }
    };
    ConfigCatClient.prototype.getValue = function (key, defaultValue, callback, user) {
        this.options.logger.debug("getValue() called.");
        this.getValueAsync(key, defaultValue, user).then(function (value) {
            callback(value);
        });
    };
    ConfigCatClient.prototype.getValueAsync = function (key, defaultValue, user) {
        var _this = this;
        this.options.logger.debug("getValueAsync() called.");
        return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
            var settings, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSettingsAsync()];
                    case 1:
                        settings = _a.sent();
                        if (!settings) {
                            this.options.logger.error("config.json is not present. Returning default value: '" + defaultValue + "'.");
                            resolve(defaultValue);
                            return [2 /*return*/];
                        }
                        result = this.evaluator.Evaluate(settings, key, defaultValue, user).Value;
                        resolve(result);
                        return [2 /*return*/];
                }
            });
        }); });
    };
    ConfigCatClient.prototype.forceRefresh = function (callback) {
        this.options.logger.debug("forceRefresh() called.");
        this.forceRefreshAsync().then(function () {
            callback();
        });
    };
    ConfigCatClient.prototype.forceRefreshAsync = function () {
        var _this = this;
        this.options.logger.debug("forceRefreshAsync() called.");
        return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, ((_a = this.configService) === null || _a === void 0 ? void 0 : _a.refreshConfigAsync())];
                    case 1:
                        _b.sent();
                        resolve();
                        return [2 /*return*/];
                }
            });
        }); });
    };
    ConfigCatClient.prototype.getAllKeys = function (callback) {
        this.options.logger.debug("getAllKeys() called.");
        this.getAllKeysAsync().then(function (value) {
            callback(value);
        });
    };
    ConfigCatClient.prototype.getAllKeysAsync = function () {
        var _this = this;
        this.options.logger.debug("getAllKeysAsync() called.");
        return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
            var settings;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSettingsAsync()];
                    case 1:
                        settings = _a.sent();
                        if (!settings) {
                            this.options.logger.error("config.json is not present, returning empty array");
                            resolve([]);
                            return [2 /*return*/];
                        }
                        resolve(Object.keys(settings));
                        return [2 /*return*/];
                }
            });
        }); });
    };
    ConfigCatClient.prototype.getVariationId = function (key, defaultVariationId, callback, user) {
        this.options.logger.debug("getVariationId() called.");
        this.getVariationIdAsync(key, defaultVariationId, user).then(function (variationId) {
            callback(variationId);
        });
    };
    ConfigCatClient.prototype.getVariationIdAsync = function (key, defaultVariationId, user) {
        var _this = this;
        this.options.logger.debug("getVariationIdAsync() called.");
        return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
            var settings, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSettingsAsync()];
                    case 1:
                        settings = _a.sent();
                        if (!settings) {
                            this.options.logger.error("config.json is not present. Returning default variationId: '" + defaultVariationId + "'.");
                            resolve(defaultVariationId);
                            return [2 /*return*/];
                        }
                        result = this.evaluator.Evaluate(settings, key, null, user, defaultVariationId).VariationId;
                        resolve(result);
                        return [2 /*return*/];
                }
            });
        }); });
    };
    ConfigCatClient.prototype.getAllVariationIds = function (callback, user) {
        this.options.logger.debug("getAllVariationIds() called.");
        this.getAllVariationIdsAsync(user).then(function (variationIds) {
            callback(variationIds);
        });
    };
    ConfigCatClient.prototype.getAllVariationIdsAsync = function (user) {
        var _this = this;
        this.options.logger.debug("getAllVariationIdsAsync() called.");
        return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
            var keys, promises, variationIds;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAllKeysAsync()];
                    case 1:
                        keys = _a.sent();
                        if (keys.length === 0) {
                            resolve([]);
                            return [2 /*return*/];
                        }
                        promises = keys.map(function (key) { return _this.getVariationIdAsync(key, null, user); });
                        return [4 /*yield*/, Promise.all(promises)];
                    case 2:
                        variationIds = _a.sent();
                        resolve(variationIds);
                        return [2 /*return*/];
                }
            });
        }); });
    };
    ConfigCatClient.prototype.getKeyAndValue = function (variationId, callback) {
        this.options.logger.debug("getKeyAndValue() called.");
        this.getKeyAndValueAsync(variationId).then(function (settingKeyAndValue) {
            callback(settingKeyAndValue);
        });
    };
    ConfigCatClient.prototype.getKeyAndValueAsync = function (variationId) {
        var _this = this;
        this.options.logger.debug("getKeyAndValueAsync() called.");
        return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
            var settings, settingKey, rolloutRules, i, rolloutRule, percentageItems, i, percentageItem;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSettingsAsync()];
                    case 1:
                        settings = _a.sent();
                        if (!settings) {
                            this.options.logger.error("config.json is not present, returning empty array");
                            resolve(null);
                            return [2 /*return*/];
                        }
                        for (settingKey in settings) {
                            if (variationId === settings[settingKey].variationId) {
                                resolve({ settingKey: settingKey, settingValue: settings[settingKey].value });
                                return [2 /*return*/];
                            }
                            rolloutRules = settings[settingKey].rolloutRules;
                            if (rolloutRules && rolloutRules.length > 0) {
                                for (i = 0; i < rolloutRules.length; i++) {
                                    rolloutRule = rolloutRules[i];
                                    if (variationId === rolloutRule.variationId) {
                                        resolve({ settingKey: settingKey, settingValue: rolloutRule.value });
                                        return [2 /*return*/];
                                    }
                                }
                            }
                            percentageItems = settings[settingKey].rolloutPercentageItems;
                            if (percentageItems && percentageItems.length > 0) {
                                for (i = 0; i < percentageItems.length; i++) {
                                    percentageItem = percentageItems[i];
                                    if (variationId === percentageItem.variationId) {
                                        resolve({ settingKey: settingKey, settingValue: percentageItem.value });
                                        return [2 /*return*/];
                                    }
                                }
                            }
                        }
                        this.options.logger.error("Could not find the setting for the given variation ID: " + variationId);
                        resolve(null);
                        return [2 /*return*/];
                }
            });
        }); });
    };
    ConfigCatClient.prototype.getAllValues = function (callback, user) {
        this.options.logger.debug("getAllValues() called.");
        this.getAllValuesAsync(user).then(function (value) {
            callback(value);
        });
    };
    ConfigCatClient.prototype.getAllValuesAsync = function (user) {
        var _this = this;
        this.options.logger.debug("getAllValuesAsync() called.");
        return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
            var settings, keys, result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSettingsAsync()];
                    case 1:
                        settings = _a.sent();
                        if (!settings) {
                            this.options.logger.error("config.json is not present, returning empty array");
                            resolve([]);
                            return [2 /*return*/];
                        }
                        keys = Object.keys(settings);
                        result = [];
                        keys.forEach(function (key) {
                            result.push({
                                settingKey: key,
                                settingValue: _this.evaluator.Evaluate(settings, key, undefined, user).Value
                            });
                        });
                        resolve(result);
                        return [2 /*return*/];
                }
            });
        }); });
    };
    ConfigCatClient.prototype.getSettingsAsync = function () {
        var _this = this;
        this.options.logger.debug("getSettingsAsync() called.");
        return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
            var localSettings, remoteConfig, remoteSettings, config;
            var _a, _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (!((_a = this.options) === null || _a === void 0 ? void 0 : _a.flagOverrides)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.options.flagOverrides.dataSource.getOverrides()];
                    case 1:
                        localSettings = _e.sent();
                        if (this.options.flagOverrides.behaviour == FlagOverrides_1.OverrideBehaviour.LocalOnly) {
                            resolve(localSettings);
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, ((_b = this.configService) === null || _b === void 0 ? void 0 : _b.getConfig())];
                    case 2:
                        remoteConfig = _e.sent();
                        remoteSettings = (0, Utils_1.getSettingsFromConfig)((_c = remoteConfig === null || remoteConfig === void 0 ? void 0 : remoteConfig.ConfigJSON) !== null && _c !== void 0 ? _c : {});
                        if (this.options.flagOverrides.behaviour == FlagOverrides_1.OverrideBehaviour.LocalOverRemote) {
                            resolve(__assign(__assign({}, remoteSettings), localSettings));
                            return [2 /*return*/];
                        }
                        else if (this.options.flagOverrides.behaviour == FlagOverrides_1.OverrideBehaviour.RemoteOverLocal) {
                            resolve(__assign(__assign({}, localSettings), remoteSettings));
                            return [2 /*return*/];
                        }
                        _e.label = 3;
                    case 3: return [4 /*yield*/, ((_d = this.configService) === null || _d === void 0 ? void 0 : _d.getConfig())];
                    case 4:
                        config = _e.sent();
                        if (!config || !config.ConfigJSON || !config.ConfigJSON[ProjectConfig_1.ConfigFile.FeatureFlags]) {
                            resolve(null);
                            return [2 /*return*/];
                        }
                        resolve((0, Utils_1.getSettingsFromConfig)(config.ConfigJSON));
                        return [2 /*return*/];
                }
            });
        }); });
    };
    return ConfigCatClient;
}());
exports.ConfigCatClient = ConfigCatClient;
var SettingKeyValue = /** @class */ (function () {
    function SettingKeyValue() {
    }
    return SettingKeyValue;
}());
exports.SettingKeyValue = SettingKeyValue;
