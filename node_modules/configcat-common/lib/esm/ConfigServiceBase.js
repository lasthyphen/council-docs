var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { FetchStatus } from "./index";
import { ConfigFile, Preferences, ProjectConfig } from "./ProjectConfig";
var ConfigServiceBase = /** @class */ (function () {
    function ConfigServiceBase(configFetcher, baseConfig) {
        this.fetchLogicCallbacks = [];
        this.configFetcher = configFetcher;
        this.baseConfig = baseConfig;
    }
    ConfigServiceBase.prototype.refreshLogicBaseAsync = function (lastProjectConfig, forceUpdateCache) {
        var _this = this;
        if (forceUpdateCache === void 0) { forceUpdateCache = true; }
        this.baseConfig.logger.debug("ConfigServiceBase.refreshLogicBaseAsync() - called.");
        return new Promise(function (resolve) {
            var _a;
            _this.fetchLogic(_this.baseConfig, (_a = lastProjectConfig === null || lastProjectConfig === void 0 ? void 0 : lastProjectConfig.HttpETag) !== null && _a !== void 0 ? _a : null, 0, function (newConfig) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(newConfig && newConfig.ConfigJSON)) return [3 /*break*/, 2];
                            this.baseConfig.logger.debug("ConfigServiceBase.refreshLogicBaseAsync() - fetchLogic() success, returning config.");
                            return [4 /*yield*/, this.baseConfig.cache.set(this.baseConfig.getCacheKey(), newConfig)];
                        case 1:
                            _a.sent();
                            resolve(newConfig);
                            return [3 /*break*/, 5];
                        case 2:
                            if (!(forceUpdateCache && lastProjectConfig && lastProjectConfig.ConfigJSON)) return [3 /*break*/, 4];
                            this.baseConfig.logger.debug("ConfigServiceBase.refreshLogicBaseAsync() - fetchLogic() didn't return a config, setting the cache with last config with new timestamp, returning last config.");
                            lastProjectConfig.Timestamp = new Date().getTime();
                            return [4 /*yield*/, this.baseConfig.cache.set(this.baseConfig.getCacheKey(), lastProjectConfig)];
                        case 3:
                            _a.sent();
                            resolve(lastProjectConfig);
                            return [3 /*break*/, 5];
                        case 4:
                            this.baseConfig.logger.debug("ConfigServiceBase.refreshLogicBaseAsync() - fetchLogic() didn't return a config, returing last config.");
                            resolve(lastProjectConfig);
                            _a.label = 5;
                        case 5: return [2 /*return*/];
                    }
                });
            }); });
        });
    };
    ConfigServiceBase.prototype.fetchLogic = function (options, lastEtag, retries, callback) {
        var _this = this;
        this.baseConfig.logger.debug("ConfigServiceBase.fetchLogic() - called.");
        var calledBaseUrl = this.baseConfig.baseUrl;
        this.fetchLogicInternal(this.baseConfig, lastEtag, retries, function (result) {
            _this.baseConfig.logger.debug("ConfigServiceBase.fetchLogic(): result.status: " + result.status);
            if (result.status != FetchStatus.Fetched || ProjectConfig.compareEtags(lastEtag !== null && lastEtag !== void 0 ? lastEtag : '', result.eTag)) {
                _this.baseConfig.logger.debug("ConfigServiceBase.fetchLogic(): result.status != FetchStatus.Fetched or etags are the same. Returning null.");
                callback(null);
                return;
            }
            if (!result.responseBody) {
                _this.baseConfig.logger.debug("ConfigServiceBase.fetchLogic(): no response body. Returning null.");
                callback(null);
                return;
            }
            var newConfig = new ProjectConfig(new Date().getTime(), result.responseBody, result.eTag);
            var preferences = newConfig.ConfigJSON[ConfigFile.Preferences];
            if (!preferences) {
                _this.baseConfig.logger.debug("ConfigServiceBase.fetchLogic(): preferences is empty. Returning newConfig.");
                callback(newConfig);
                return;
            }
            var baseUrl = preferences[Preferences.BaseUrl];
            // If the base_url is the same as the last called one, just return the response.
            if (!baseUrl || baseUrl == calledBaseUrl) {
                _this.baseConfig.logger.debug("ConfigServiceBase.fetchLogic(): baseUrl OK. Returning newConfig.");
                callback(newConfig);
                return;
            }
            var redirect = preferences[Preferences.Redirect];
            // If the base_url is overridden, and the redirect parameter is not 2 (force),
            // the SDK should not redirect the calls and it just have to return the response.
            if (options.baseUrlOverriden && redirect !== 2) {
                _this.baseConfig.logger.debug("ConfigServiceBase.fetchLogic(): options.baseUrlOverriden && redirect !== 2.");
                callback(newConfig);
                return;
            }
            options.baseUrl = baseUrl;
            if (redirect === 0) {
                callback(newConfig);
                return;
            }
            if (redirect === 1) {
                options.logger.warn("Your dataGovernance parameter at ConfigCatClient initialization is not in sync " +
                    "with your preferences on the ConfigCat Dashboard: " +
                    "https://app.configcat.com/organization/data-governance. " +
                    "Only Organization Admins can access this preference.");
            }
            if (retries >= 2) {
                options.logger.error("Redirect loop during config.json fetch. Please contact support@configcat.com.");
                callback(newConfig);
                return;
            }
            _this.fetchLogic(options, lastEtag, ++retries, callback);
            return;
        });
    };
    ConfigServiceBase.prototype.fetchLogicInternal = function (options, lastEtag, retries, callback) {
        var _this = this;
        this.baseConfig.logger.debug("ConfigServiceBase.fetchLogicInternal(): called.");
        if (retries === 0) { // Only lock on the top-level calls, not on the recursive calls (config.json redirections).
            this.fetchLogicCallbacks.push(callback);
            if (this.fetchLogicCallbacks.length > 1) {
                // The first fetchLogic call is already in progress.
                this.baseConfig.logger.debug("ConfigServiceBase.fetchLogicInternal(): The first fetchLogic call is already in progress. this.fetchLogicCallbacks.length = " + this.fetchLogicCallbacks.length);
                return;
            }
            this.baseConfig.logger.debug("ConfigServiceBase.fetchLogicInternal(): Calling fetchLogic");
            this.configFetcher.fetchLogic(options, lastEtag, function (newProjectConfig) {
                _this.baseConfig.logger.debug("ConfigServiceBase.fetchLogicInternal(): fetchLogic() success, calling callbacks. this.fetchLogicCallbacks.length = " + _this.fetchLogicCallbacks.length);
                while (_this.fetchLogicCallbacks.length) {
                    var thisCallback = _this.fetchLogicCallbacks.pop();
                    if (thisCallback) {
                        _this.baseConfig.logger.debug("ConfigServiceBase.fetchLogicInternal(): fetchLogic() success, calling callback.");
                        thisCallback(newProjectConfig);
                    }
                }
            });
        }
        else {
            // Recursive calls should call the fetchLogic as is.
            this.baseConfig.logger.debug("ConfigServiceBase.fetchLogicInternal(): calling fetchLogic(), recursive call. retries = " + retries);
            this.configFetcher.fetchLogic(options, lastEtag, callback);
        }
    };
    return ConfigServiceBase;
}());
export { ConfigServiceBase };
